{"ast":null,"code":"var _jsxFileName = \"/home/mrblackghost/Documents/Projects/Task/task/src/Disperse.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Disperse = () => {\n  _s();\n  const [input, setInput] = useState('');\n  const [addresses, setAddresses] = useState([]);\n  const [amounts, setAmounts] = useState([]);\n  const [errors, setErrors] = useState([]);\n  const [validLines, setValidLines] = useState([]);\n  const [lineHistory, setLineHistory] = useState([]);\n  const [showAddButton, setShowAddButton] = useState([]);\n  const onSubmit = e => {\n    e.preventDefault();\n\n    // Reset errors and valid lines\n    setErrors([]);\n    setValidLines([]);\n    setShowAddButton([]);\n\n    // Split the input into address and amount pairs\n    const lines = input.split('\\n'); // Split by line breaks\n    const newAddresses = [];\n    const newAmounts = [];\n    const newErrors = [];\n    const newValidLines = [];\n    const lineNumbers = {}; // To keep track of line numbers\n    lines.forEach((line, index) => {\n      const [address, amount] = line.split('=');\n      if (address && !isNaN(amount)) {\n        newAddresses.push(address);\n        newAmounts.push(Number(amount));\n        newValidLines.push(line);\n        setShowAddButton(prev => [...prev, false]); // Initialize showAddButton state\n      } else {\n        newErrors.push(`Invalid pair on line ${index + 1}: ${line}`);\n      }\n      if (lineNumbers[line] !== undefined) {\n        // If the line has been seen before, add it to the error message\n        newErrors.push(`Duplicate line on lines ${lineNumbers[line] + 1} and ${index + 1}: ${line}`);\n        /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setShowButtons(prev => [...prev.slice(0, index), true, ...prev.slice(index + 1)]),\n            children: \"Add\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => Keepfirstone(line),\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 7\n        }, this);\n      } else {\n        // Otherwise, store the line number\n        lineNumbers[line] = index;\n      }\n    });\n\n    // Check if the current addresses are the same as the previous addresses\n    if (JSON.stringify(newAddresses) === JSON.stringify(addresses)) {\n      newErrors.push('Addresses are the same as the previous value.');\n    }\n    if (newErrors.length > 0) {\n      setErrors(newErrors);\n    } else {\n      setErrors([]);\n      const mergedAddresses = [...addresses];\n      const mergedAmounts = [...amounts];\n\n      // Merge duplicate lines by adding amounts to the previous line\n      for (let i = 0; i < newAddresses.length; i++) {\n        const address = newAddresses[i];\n        const amount = newAmounts[i];\n        if (mergedAddresses.includes(address)) {\n          const index = mergedAddresses.indexOf(address);\n          mergedAmounts[index] += amount;\n        } else {\n          mergedAddresses.push(address);\n          mergedAmounts.push(amount);\n        }\n      }\n      setAddresses(mergedAddresses);\n      setAmounts(mergedAmounts);\n      setValidLines(newValidLines);\n\n      // Append each line to the line history\n      setLineHistory(prevHistory => [...prevHistory, ...lines]);\n\n      // Clear the input after submission\n      setInput('');\n    }\n  };\n  const [showButtons, setShowButtons] = useState(Array(validLines.length).fill(false));\n  const Keepfirstone = line => {\n    // Split the current input into lines\n    const inputLines = input.split('\\n');\n\n    // Filter out the duplicate line from inputLines\n    const updatedInputLines = inputLines.filter(inputLine => inputLine !== line);\n\n    // Join the updated lines back together and set it as the new input\n    setInput(updatedInputLines.join('\\n'));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: onSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"input\",\n        children: \"Enter Addresses and Amounts:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        id: \"input\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"address1=amount1, address2=amount2, ...\",\n        rows: \"4\" // You can adjust the number of visible rows as needed\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), errors.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: errors.map((error, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }, this), lineHistory.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Line History:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: lineHistory.map((line, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [line, ' ', errors.includes('Duplicate line: ' + line) && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setShowButtons(prev => [...prev.slice(0, index), true, ...prev.slice(index + 1)]),\n              children: \"Add\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => Keepfirstone(line),\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 19\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n};\n_s(Disperse, \"CEB1ah1bkC12FtDEPsGgjuyFp8w=\");\n_c = Disperse;\nexport default Disperse;\nvar _c;\n$RefreshReg$(_c, \"Disperse\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Disperse","_s","input","setInput","addresses","setAddresses","amounts","setAmounts","errors","setErrors","validLines","setValidLines","lineHistory","setLineHistory","showAddButton","setShowAddButton","onSubmit","e","preventDefault","lines","split","newAddresses","newAmounts","newErrors","newValidLines","lineNumbers","forEach","line","index","address","amount","isNaN","push","Number","prev","undefined","children","onClick","setShowButtons","slice","fileName","_jsxFileName","lineNumber","columnNumber","Keepfirstone","JSON","stringify","length","mergedAddresses","mergedAmounts","i","includes","indexOf","prevHistory","showButtons","Array","fill","inputLines","updatedInputLines","filter","inputLine","join","htmlFor","id","value","onChange","target","placeholder","rows","type","className","map","error","_c","$RefreshReg$"],"sources":["/home/mrblackghost/Documents/Projects/Task/task/src/Disperse.js"],"sourcesContent":["import React, { useState } from 'react';\n\nconst Disperse = () => {\n  const [input, setInput] = useState('');\n  const [addresses, setAddresses] = useState([]);\n  const [amounts, setAmounts] = useState([]);\n  const [errors, setErrors] = useState([]);\n  const [validLines, setValidLines] = useState([]);\n  const [lineHistory, setLineHistory] = useState([]);\n  const [showAddButton, setShowAddButton] = useState([]);\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n\n    // Reset errors and valid lines\n    setErrors([]);\n    setValidLines([]);\n    setShowAddButton([]);\n\n    // Split the input into address and amount pairs\n    const lines = input.split('\\n'); // Split by line breaks\n    const newAddresses = [];\n    const newAmounts = [];\n    const newErrors = [];\n    const newValidLines = [];\n    const lineNumbers = {}; // To keep track of line numbers\n    lines.forEach((line, index) => {\n      const [address, amount] = line.split('=');\n\n      if (address && !isNaN(amount)) {\n        newAddresses.push(address);\n        newAmounts.push(Number(amount));\n        newValidLines.push(line);\n        setShowAddButton((prev) => [...prev, false]); // Initialize showAddButton state\n      } else {\n        newErrors.push(`Invalid pair on line ${index + 1}: ${line}`);\n      }\n   \n\n    if (lineNumbers[line] !== undefined) {\n      // If the line has been seen before, add it to the error message\n      newErrors.push(`Duplicate line on lines ${lineNumbers[line] + 1} and ${index + 1}: ${line}`);\n      <div>\n      <button onClick={() => setShowButtons((prev) => [...prev.slice(0, index), true, ...prev.slice(index + 1)])}>Add</button>\n      <button onClick={() => Keepfirstone(line)}>Delete</button>\n    </div>\n    } else {\n      // Otherwise, store the line number\n      lineNumbers[line] = index;\n    }\n  });\n     \n\n    // Check if the current addresses are the same as the previous addresses\n    if (JSON.stringify(newAddresses) === JSON.stringify(addresses)) {\n      newErrors.push('Addresses are the same as the previous value.');\n    }\n\n    if (newErrors.length > 0) {\n      setErrors(newErrors);\n    } else {\n      setErrors([]);\n\n      const mergedAddresses = [...addresses];\n      const mergedAmounts = [...amounts];\n\n      // Merge duplicate lines by adding amounts to the previous line\n      for (let i = 0; i < newAddresses.length; i++) {\n        const address = newAddresses[i];\n        const amount = newAmounts[i];\n\n        if (mergedAddresses.includes(address)) {\n          const index = mergedAddresses.indexOf(address);\n          mergedAmounts[index] += amount;\n        } else {\n          mergedAddresses.push(address);\n          mergedAmounts.push(amount);\n        }\n      }\n\n      setAddresses(mergedAddresses);\n      setAmounts(mergedAmounts);\n      setValidLines(newValidLines);\n\n      // Append each line to the line history\n      setLineHistory((prevHistory) => [...prevHistory, ...lines]);\n\n      // Clear the input after submission\n      setInput('');\n    }\n  };\n  const [showButtons, setShowButtons] = useState(Array(validLines.length).fill(false));\n  const Keepfirstone = (line) => {\n    // Split the current input into lines\n    const inputLines = input.split('\\n');\n    \n    // Filter out the duplicate line from inputLines\n    const updatedInputLines = inputLines.filter((inputLine) => inputLine !== line);\n  \n    // Join the updated lines back together and set it as the new input\n    setInput(updatedInputLines.join('\\n'));\n  };\n  \n\n  return (\n    <div>\n      <form onSubmit={onSubmit}>\n        <label htmlFor=\"input\">Enter Addresses and Amounts:</label>\n        <textarea\n          id=\"input\"\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n          placeholder=\"address1=amount1, address2=amount2, ...\"\n          rows=\"4\" // You can adjust the number of visible rows as needed\n        />\n        <button type=\"submit\">Submit</button>\n      </form>\n\n      {errors.length > 0 && (\n        <div className=\"error\">\n          {errors.map((error, index) => (\n            <p key={index}>{error}</p>\n          ))}\n        </div>\n      )}\n\n{lineHistory.length > 0 && (\n        <div>\n          <h2>Line History:</h2>\n          <ul>\n          {lineHistory.map((line, index) => (\n              <li key={index}>\n                {line}{' '}\n                {errors.includes('Duplicate line: ' + line) && (\n                  <div>\n                    <button onClick={() => setShowButtons((prev) => [...prev.slice(0, index), true, ...prev.slice(index + 1)])}>Add</button>\n                    <button onClick={() => Keepfirstone(line)}>Delete</button>\n                  </div>\n                )}\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n\n      {/* Display other sections as needed */}\n    </div>\n  );\n};\n\nexport default Disperse;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}