{"ast":null,"code":"var _jsxFileName = \"/home/mrblackghost/Documents/Projects/Task/task/src/Disperse.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Disperse = () => {\n  _s();\n  const [input, setInput] = useState('');\n  const [addresses, setAddresses] = useState([]);\n  const [amounts, setAmounts] = useState([]);\n  const [errors, setErrors] = useState([]);\n  const [validLines, setValidLines] = useState([]);\n  const [lineHistory, setLineHistory] = useState([]);\n  const onSubmit = e => {\n    e.preventDefault();\n\n    // Reset errors and valid lines\n    setErrors([]);\n    setValidLines([]);\n\n    // Split the input into address and amount pairs\n    const lines = input.split('\\n'); // Split by line breaks\n    const newAddresses = [];\n    const newAmounts = [];\n    const newErrors = [];\n    const newValidLines = [];\n    lines.forEach((line, index) => {\n      const [address, amount] = line.split('=');\n      if (address && !isNaN(amount)) {\n        newAddresses.push(address);\n        newAmounts.push(Number(amount));\n        newValidLines.push(line);\n      } else {\n        newErrors.push(`Invalid pair on line ${index + 1}: ${line}`);\n      }\n    });\n\n    // Check if the current input is the same as any previous line\n    if (lineHistory.includes(input)) {\n      newErrors.push('Duplicate line: ' + input);\n    }\n\n    // Check if the current addresses are the same as the previous addresses\n    if (JSON.stringify(newAddresses) === JSON.stringify(addresses)) {\n      newErrors.push('Addresses are the same as the previous value.');\n    }\n    if (newErrors.length > 0) {\n      setErrors(newErrors);\n    } else {\n      setErrors([]);\n      const mergedAddresses = [...addresses];\n      const mergedAmounts = [...amounts];\n\n      // Merge duplicate lines by adding amounts to the previous line\n      for (let i = 0; i < newAddresses.length; i++) {\n        const address = newAddresses[i];\n        const amount = newAmounts[i];\n        if (mergedAddresses.includes(address)) {\n          const index = mergedAddresses.indexOf(address);\n          mergedAmounts[index] += amount;\n        } else {\n          mergedAddresses.push(address);\n          mergedAmounts.push(amount);\n        }\n      }\n      setAddresses(mergedAddresses);\n      setAmounts(mergedAmounts);\n      setValidLines(newValidLines);\n\n      // Append each line to the line history\n      setLineHistory(prevHistory => [...prevHistory, ...lines]);\n\n      // Clear the input after submission\n      setInput('');\n    }\n  };\n  const handleAddClick = line => {\n    // Find the previous line and update its amount\n    const addressToMerge = addresses[validLines.indexOf(line)];\n    const amountToAdd = amounts[validLines.indexOf(line)];\n    const indexToMerge = addresses.indexOf(addressToMerge);\n    if (indexToMerge !== -1) {\n      const updatedAmount = amounts[indexToMerge] + amountToAdd;\n      setAmounts(prevAmounts => [...prevAmounts.slice(0, indexToMerge), updatedAmount, ...prevAmounts.slice(indexToMerge + 1)]);\n    }\n    // Remove the duplicate line from validLines\n    const updatedValidLines = validLines.filter(validLine => validLine !== line);\n    setValidLines(updatedValidLines);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: onSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"input\",\n        children: \"Enter Addresses and Amounts:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        id: \"input\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"address1=amount1, address2=amount2, ...\",\n        rows: \"4\" // You can adjust the number of visible rows as needed\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), errors.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: errors.map((error, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }, this), lineHistory.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Line History:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: lineHistory.map((line, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [`Line ${index + 1}: ${line}`, ' ', validLines.includes(line) && /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleAddClick(line),\n            children: \"Add\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 19\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};\n_s(Disperse, \"0w1Z008LDkXVy8wB9s0Q3Yj8Hvo=\");\n_c = Disperse;\nexport default Disperse;\nvar _c;\n$RefreshReg$(_c, \"Disperse\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Disperse","_s","input","setInput","addresses","setAddresses","amounts","setAmounts","errors","setErrors","validLines","setValidLines","lineHistory","setLineHistory","onSubmit","e","preventDefault","lines","split","newAddresses","newAmounts","newErrors","newValidLines","forEach","line","index","address","amount","isNaN","push","Number","includes","JSON","stringify","length","mergedAddresses","mergedAmounts","i","indexOf","prevHistory","handleAddClick","addressToMerge","amountToAdd","indexToMerge","updatedAmount","prevAmounts","slice","updatedValidLines","filter","validLine","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","id","value","onChange","target","placeholder","rows","type","className","map","error","onClick","_c","$RefreshReg$"],"sources":["/home/mrblackghost/Documents/Projects/Task/task/src/Disperse.js"],"sourcesContent":["import React, { useState } from 'react';\n\nconst Disperse = () => {\n  const [input, setInput] = useState('');\n  const [addresses, setAddresses] = useState([]);\n  const [amounts, setAmounts] = useState([]);\n  const [errors, setErrors] = useState([]);\n  const [validLines, setValidLines] = useState([]);\n  const [lineHistory, setLineHistory] = useState([]);\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n\n    // Reset errors and valid lines\n    setErrors([]);\n    setValidLines([]);\n\n    // Split the input into address and amount pairs\n    const lines = input.split('\\n'); // Split by line breaks\n    const newAddresses = [];\n    const newAmounts = [];\n    const newErrors = [];\n    const newValidLines = [];\n\n    lines.forEach((line, index) => {\n      const [address, amount] = line.split('=');\n\n      if (address && !isNaN(amount)) {\n        newAddresses.push(address);\n        newAmounts.push(Number(amount));\n        newValidLines.push(line);\n      } else {\n        newErrors.push(`Invalid pair on line ${index + 1}: ${line}`);\n      }\n    });\n\n    // Check if the current input is the same as any previous line\n    if (lineHistory.includes(input)) {\n      newErrors.push('Duplicate line: ' + input);\n    }\n\n    // Check if the current addresses are the same as the previous addresses\n    if (JSON.stringify(newAddresses) === JSON.stringify(addresses)) {\n      newErrors.push('Addresses are the same as the previous value.');\n    }\n\n    if (newErrors.length > 0) {\n      setErrors(newErrors);\n    } else {\n      setErrors([]);\n\n      const mergedAddresses = [...addresses];\n      const mergedAmounts = [...amounts];\n\n      // Merge duplicate lines by adding amounts to the previous line\n      for (let i = 0; i < newAddresses.length; i++) {\n        const address = newAddresses[i];\n        const amount = newAmounts[i];\n\n        if (mergedAddresses.includes(address)) {\n          const index = mergedAddresses.indexOf(address);\n          mergedAmounts[index] += amount;\n        } else {\n          mergedAddresses.push(address);\n          mergedAmounts.push(amount);\n        }\n      }\n\n      setAddresses(mergedAddresses);\n      setAmounts(mergedAmounts);\n      setValidLines(newValidLines);\n\n      // Append each line to the line history\n      setLineHistory((prevHistory) => [...prevHistory, ...lines]);\n\n      // Clear the input after submission\n      setInput('');\n    }\n  };\n\n  const handleAddClick = (line) => {\n    // Find the previous line and update its amount\n    const addressToMerge = addresses[validLines.indexOf(line)];\n    const amountToAdd = amounts[validLines.indexOf(line)];\n    const indexToMerge = addresses.indexOf(addressToMerge);\n    if (indexToMerge !== -1) {\n      const updatedAmount = amounts[indexToMerge] + amountToAdd;\n      setAmounts((prevAmounts) => [\n        ...prevAmounts.slice(0, indexToMerge),\n        updatedAmount,\n        ...prevAmounts.slice(indexToMerge + 1),\n      ]);\n    }\n    // Remove the duplicate line from validLines\n    const updatedValidLines = validLines.filter((validLine) => validLine !== line);\n    setValidLines(updatedValidLines);\n  };\n\n  return (\n    <div>\n      <form onSubmit={onSubmit}>\n        <label htmlFor=\"input\">Enter Addresses and Amounts:</label>\n        <textarea\n          id=\"input\"\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n          placeholder=\"address1=amount1, address2=amount2, ...\"\n          rows=\"4\" // You can adjust the number of visible rows as needed\n        />\n        <button type=\"submit\">Submit</button>\n      </form>\n\n      {errors.length > 0 && (\n        <div className=\"error\">\n          {errors.map((error, index) => (\n            <p key={index}>{error}</p>\n          ))}\n        </div>\n      )}\n\n      {lineHistory.length > 0 && (\n        <div>\n          <h2>Line History:</h2>\n          <ul>\n            {lineHistory.map((line, index) => (\n              <li key={index}>\n                {`Line ${index + 1}: ${line}`}{' '}\n                {validLines.includes(line) && (\n                  <button onClick={() => handleAddClick(line)}>Add</button>\n                )}\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n\n      {/* Display other sections as needed */}\n    </div>\n  );\n};\n\nexport default Disperse;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}