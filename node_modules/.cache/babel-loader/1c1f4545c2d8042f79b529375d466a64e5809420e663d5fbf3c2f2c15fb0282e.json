{"ast":null,"code":"var _jsxFileName = \"/home/mrblackghost/Documents/Projects/Task/task/src/Disperse.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Disperse = () => {\n  _s();\n  const [input, setInput] = useState('');\n  const [addresses, setAddresses] = useState([]);\n  const [amounts, setAmounts] = useState([]);\n  const [errors, setErrors] = useState([]);\n  const [validLines, setValidLines] = useState([]);\n  const [lineHistory, setLineHistory] = useState([]);\n  const onSubmit = e => {\n    e.preventDefault();\n\n    // Reset errors and valid lines\n    setErrors([]);\n    setValidLines([]);\n\n    // Split the input into address and amount pairs\n    const lines = input.split('\\n'); // Split by line breaks\n    const newAddresses = [];\n    const newAmounts = [];\n    const newErrors = [];\n    const newValidLines = [];\n    const addressesMatch = line => {\n      const address = line.split('=')[0];\n      return addresses.includes(address);\n    };\n    lines.forEach((line, index) => {\n      const [address, amount] = line.split('=');\n      if (address && !isNaN(amount)) {\n        newAddresses.push(address);\n        newAmounts.push(Number(amount));\n        newValidLines.push(line);\n      } else {\n        newErrors.push(`Invalid pair on line ${index + 1}: ${line}`);\n      }\n    });\n\n    // Check if the current input is the same as any previous line\n    if (lineHistory.includes(input)) {\n      newErrors.push('Duplicate line: ' + input);\n    }\n\n    // Check if the current addresses are the same as the previous addresses\n    if (JSON.stringify(newAddresses) === JSON.stringify(addresses)) {\n      newErrors.push('Addresses are the same as the previous value.');\n    }\n    if (newErrors.length > 0) {\n      setErrors(newErrors);\n    } else {\n      setErrors([]);\n      const mergedAddresses = [...addresses];\n      const mergedAmounts = [...amounts];\n\n      // Merge duplicate lines by adding amounts to the previous line\n      for (let i = 0; i < newAddresses.length; i++) {\n        const address = newAddresses[i];\n        const amount = newAmounts[i];\n        if (mergedAddresses.includes(address)) {\n          const index = mergedAddresses.indexOf(address);\n          mergedAmounts[index] += amount;\n        } else {\n          mergedAddresses.push(address);\n          mergedAmounts.push(amount);\n        }\n      }\n      setAddresses(mergedAddresses);\n      setAmounts(mergedAmounts);\n      setValidLines(newValidLines);\n\n      // Append each line to the line history\n      setLineHistory(prevHistory => [...prevHistory, ...lines]);\n\n      // Clear the input after submission\n      setInput('');\n    }\n  };\n  const handleAddClick = line => {\n    // Find the previous line and update its amount\n    const addressToMerge = addresses[validLines.indexOf(line)];\n    const amountToAdd = amounts[validLines.indexOf(line)];\n    const indexToMerge = addresses.indexOf(addressToMerge);\n    if (indexToMerge !== -1) {\n      const updatedAmount = amounts[indexToMerge] + amountToAdd;\n      setAmounts(prevAmounts => [...prevAmounts.slice(0, indexToMerge), updatedAmount, ...prevAmounts.slice(indexToMerge + 1)]);\n    }\n    // Remove the duplicate line from validLines\n    const updatedValidLines = validLines.filter(validLine => validLine !== line);\n    setValidLines(updatedValidLines);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: onSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"input\",\n        children: \"Enter Addresses and Amounts:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        id: \"input\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"address1=amount1, address2=amount2, ...\",\n        rows: \"4\" // You can adjust the number of visible rows as needed\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), errors.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: errors.map((error, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }, this), lineHistory.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Line History:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: lineHistory.map((line, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [`Line ${index + 1}: ${line}`, ' ', validLines.includes(line) && addressesMatch(line) && /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleAddClick(line),\n            children: \"Add\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 19\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n};\n_s(Disperse, \"0w1Z008LDkXVy8wB9s0Q3Yj8Hvo=\");\n_c = Disperse;\nexport default Disperse;\n\n// Function to check if addresses match between two lines\nvar _c;\n$RefreshReg$(_c, \"Disperse\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Disperse","_s","input","setInput","addresses","setAddresses","amounts","setAmounts","errors","setErrors","validLines","setValidLines","lineHistory","setLineHistory","onSubmit","e","preventDefault","lines","split","newAddresses","newAmounts","newErrors","newValidLines","addressesMatch","line","address","includes","forEach","index","amount","isNaN","push","Number","JSON","stringify","length","mergedAddresses","mergedAmounts","i","indexOf","prevHistory","handleAddClick","addressToMerge","amountToAdd","indexToMerge","updatedAmount","prevAmounts","slice","updatedValidLines","filter","validLine","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","id","value","onChange","target","placeholder","rows","type","className","map","error","onClick","_c","$RefreshReg$"],"sources":["/home/mrblackghost/Documents/Projects/Task/task/src/Disperse.js"],"sourcesContent":["import React, { useState } from 'react';\n\nconst Disperse = () => {\n  const [input, setInput] = useState('');\n  const [addresses, setAddresses] = useState([]);\n  const [amounts, setAmounts] = useState([]);\n  const [errors, setErrors] = useState([]);\n  const [validLines, setValidLines] = useState([]);\n  const [lineHistory, setLineHistory] = useState([]);\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n\n    // Reset errors and valid lines\n    setErrors([]);\n    setValidLines([]);\n\n    // Split the input into address and amount pairs\n    const lines = input.split('\\n'); // Split by line breaks\n    const newAddresses = [];\n    const newAmounts = [];\n    const newErrors = [];\n    const newValidLines = [];\n    const addressesMatch = (line) => {\n        const address = line.split('=')[0];\n        return addresses.includes(address);\n      };\n    lines.forEach((line, index) => {\n      const [address, amount] = line.split('=');\n\n      if (address && !isNaN(amount)) {\n        newAddresses.push(address);\n        newAmounts.push(Number(amount));\n        newValidLines.push(line);\n      } else {\n        newErrors.push(`Invalid pair on line ${index + 1}: ${line}`);\n      }\n    });\n\n    // Check if the current input is the same as any previous line\n    if (lineHistory.includes(input)) {\n      newErrors.push('Duplicate line: ' + input);\n    }\n\n    // Check if the current addresses are the same as the previous addresses\n    if (JSON.stringify(newAddresses) === JSON.stringify(addresses)) {\n      newErrors.push('Addresses are the same as the previous value.');\n    }\n\n    if (newErrors.length > 0) {\n      setErrors(newErrors);\n    } else {\n      setErrors([]);\n\n      const mergedAddresses = [...addresses];\n      const mergedAmounts = [...amounts];\n\n      // Merge duplicate lines by adding amounts to the previous line\n      for (let i = 0; i < newAddresses.length; i++) {\n        const address = newAddresses[i];\n        const amount = newAmounts[i];\n\n        if (mergedAddresses.includes(address)) {\n          const index = mergedAddresses.indexOf(address);\n          mergedAmounts[index] += amount;\n        } else {\n          mergedAddresses.push(address);\n          mergedAmounts.push(amount);\n        }\n      }\n\n      setAddresses(mergedAddresses);\n      setAmounts(mergedAmounts);\n      setValidLines(newValidLines);\n\n      // Append each line to the line history\n      setLineHistory((prevHistory) => [...prevHistory, ...lines]);\n\n      // Clear the input after submission\n      setInput('');\n    }\n  };\n\n  const handleAddClick = (line) => {\n    // Find the previous line and update its amount\n    const addressToMerge = addresses[validLines.indexOf(line)];\n    const amountToAdd = amounts[validLines.indexOf(line)];\n    const indexToMerge = addresses.indexOf(addressToMerge);\n    if (indexToMerge !== -1) {\n      const updatedAmount = amounts[indexToMerge] + amountToAdd;\n      setAmounts((prevAmounts) => [\n        ...prevAmounts.slice(0, indexToMerge),\n        updatedAmount,\n        ...prevAmounts.slice(indexToMerge + 1),\n      ]);\n    }\n    // Remove the duplicate line from validLines\n    const updatedValidLines = validLines.filter((validLine) => validLine !== line);\n    setValidLines(updatedValidLines);\n  };\n\n  return (\n    <div>\n      <form onSubmit={onSubmit}>\n        <label htmlFor=\"input\">Enter Addresses and Amounts:</label>\n        <textarea\n          id=\"input\"\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n          placeholder=\"address1=amount1, address2=amount2, ...\"\n          rows=\"4\" // You can adjust the number of visible rows as needed\n        />\n        <button type=\"submit\">Submit</button>\n      </form>\n\n      {errors.length > 0 && (\n        <div className=\"error\">\n          {errors.map((error, index) => (\n            <p key={index}>{error}</p>\n          ))}\n        </div>\n      )}\n\n      {lineHistory.length > 0 && (\n        <div>\n          <h2>Line History:</h2>\n          <ul>\n            {lineHistory.map((line, index) => (\n              <li key={index}>\n                {`Line ${index + 1}: ${line}`}{' '}\n                {validLines.includes(line) && addressesMatch(line) && (\n                  <button onClick={() => handleAddClick(line)}>Add</button>\n                )}\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n\n      {/* Display other sections as needed */}\n    </div>\n  );\n};\n\nexport default Disperse;\n\n// Function to check if addresses match between two lines\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}