{"ast":null,"code":"var _jsxFileName = \"/home/mrblackghost/Documents/Projects/Task/task/src/Disperse.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Disperse = () => {\n  _s();\n  const [inputValue, setInputValue] = useState([]);\n  const [error, setError] = useState(null);\n  const [showerror, setshowError] = useState(false);\n  const [splitdata, setSplitData] = useState([]);\n  const [showbutton, setShowbutton] = useState(false);\n  const [showtext, setShowText] = useState([]);\n\n  // useEffect(() => {\n  //   const tempSplitData =       inputValue\n  //     // const [address, amount] = str.split(/[ ,=]/);\n  //     // return { address, amount: amount || 0, line: index + 1 };\n  //   // });\n\n  //   setShowText(tempSplitData);\n  // }, [inputValue]);\n\n  const onSumbit = () => {\n    setshowError(true);\n    const errors = [];\n    const duplicateMap = new Map();\n    for (let previous = 0; previous < splitdata.length; previous++) {\n      if (!isNaN(splitdata[previous].amount || splitdata[previous].amount === \"\")) {} else {\n        errors.push(`Line ${previous + 1} wrong amount`);\n      }\n      for (let current = previous + 1; current < splitdata.length; current++) {\n        if (splitdata[previous].address === splitdata[current].address) {\n          if (!duplicateMap.has(splitdata[previous].address)) {\n            duplicateMap.set(splitdata[previous].address, [previous + 1]);\n          }\n          if (!duplicateMap.get(splitdata[previous].address).includes(current + 1)) {\n            duplicateMap.get(splitdata[previous].address).push(current + 1);\n          }\n        }\n      }\n    }\n    duplicateMap.forEach((index, address) => {\n      errors.push(`Address ${address} has duplicate entries at lines ${index.join(\", \")}`);\n      setShowbutton(true);\n    });\n    if (errors.length > 0) {\n      setError(errors);\n      setshowError(true);\n    } else {\n      setError([]);\n      setShowbutton(false);\n      setshowError(false);\n    }\n  };\n  const handleCombineBalances = index => {\n    const combinedData = [];\n    let counter = 1;\n    for (let previous = 0; previous < splitdata.length; previous++) {\n      for (let current = previous + 1; current < splitdata.length; current++) {\n        if (splitdata[previous].address === splitdata[current].address) {\n          const duplicateAmount = parseInt(splitdata[current].amount, 10); // Parse to integer\n          splitdata[previous].amount = parseInt(splitdata[previous].amount, 10); // Parse to integer\n          splitdata[previous].amount += duplicateAmount;\n          // Remove the duplicate entry\n          splitdata.splice(current, 1);\n          current--; // Adjust the loop index since we removed an element\n        }\n      }\n      // Push non-duplicate items to combinedData\n      combinedData.push({\n        address: splitdata[previous].address,\n        amount: splitdata[previous].amount,\n        line: counter++ // Include the line index\n      });\n    }\n\n    setShowbutton(false);\n    setSplitData(combinedData);\n  };\n  const KeepFirstOne = () => {\n    const filteredData = [];\n    let counter = 1;\n    for (let previous = 0; previous < splitdata.length; previous++) {\n      for (let current = previous + 1; current < splitdata.length; current++) {\n        if (splitdata[previous].address === splitdata[current].address) {\n          // Remove the duplicate entry\n          splitdata.splice(current, 1);\n          current--; // Adjust the loop index since we removed an element\n        }\n      }\n      // Push non-duplicate items to combinedData\n      filteredData.push({\n        address: splitdata[previous].address,\n        amount: splitdata[previous].amount,\n        line: counter++ // Include the line index\n      });\n    }\n\n    setShowbutton(false);\n    setSplitData(filteredData);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100%\",\n      height: \"100vh\",\n      backgroundColor: \"whitesmoke\",\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"90%\",\n        height: \"90%\",\n        backgroundColor: \"white\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: \"50%\",\n          height: \"50%\",\n          padding: \"3vw\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Addresses with Amounts\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"grid\",\n            gridTemplateColumns: \"auto 1fr\",\n            gap: \"10px\",\n            height: \"80%\",\n            backgroundColor: \"#FFCCFF\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              fontSize: \"13px\"\n            },\n            children: splitdata.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n              children: item.line\n            }, item.line, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            cols: 5,\n            style: {\n              width: \"100%\",\n              height: \"98.5%\",\n              border: \"0px\",\n              borderLeft: \"1px solid grey\",\n              backgroundColor: \"transparent\"\n            },\n            value: splitdata.length > 0 ? splitdata.map(item => `${item.address} ${item.amount}`).join(\"\\n\") : inputValue,\n            onChange: e => {\n              setShowText([]);\n              setSplitData([]);\n              const text = e.target.value;\n\n              // Split the text into lines\n              const lines = text.split(/\\n/);\n\n              // Process each line individually\n              const processedLines = lines.map(line => {\n                // Split based on commas, spaces, or equal signs\n                const parts = line.split(/[ ,=]/);\n                const address = parts[0];\n                let amount = parts.slice(1).join(' '); // Join remaining parts as amount\n\n                // Check if a space or comma comes after the amount and add a newline\n                const spaceIndex = amount.indexOf(\" \");\n                const commaIndex = amount.indexOf(\",\");\n                if (spaceIndex !== -1 || commaIndex !== -1) {\n                  amount += \"\\n\";\n                }\n                return {\n                  address,\n                  amount: parseInt(amount) || 0\n                };\n              });\n              console.log(processedLines);\n              // Update the inputValue state with the processed lines\n              setInputValue(processedLines);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: \"#7D7C7C\",\n            fontSize: \"13px\"\n          },\n          children: \"Separated by ','or' 'or'='\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 11\n        }, this), showbutton && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            justifyContent: \"flex-end\",\n            alignItems: \"center\",\n            color: \"red\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            style: {\n              backgroundColor: \"transparent\",\n              color: \"red\",\n              border: \"none\",\n              marginRight: \"5px\"\n            },\n            onClick: () => {\n              KeepFirstOne();\n              onSumbit();\n            },\n            children: \"Keep first one\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 15\n          }, this), \"|\", /*#__PURE__*/_jsxDEV(\"button\", {\n            style: {\n              backgroundColor: \"transparent\",\n              color: \"red\",\n              border: \"none\",\n              marginLeft: \"5px\"\n            },\n            onClick: () => {\n              handleCombineBalances();\n              onSumbit();\n            },\n            children: \"Combine Balance\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 13\n        }, this), showerror && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            color: \"red\",\n            fontSize: \"15px\",\n            margin: \"5px 0\"\n          },\n          children: [\" \", error.some(errorMessage => errorMessage.startsWith(\"Address\")) ? \"Duplicated\" : \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              border: \"1px solid red\",\n              borderRadius: \"4px\",\n              padding: \"2px\",\n              fontSize: \"15px\"\n            },\n            children: error.map((errorMessage, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n              style: {\n                color: \"red\"\n              },\n              children: errorMessage\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 257,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            width: \"100%\",\n            marginTop: \"3vh\",\n            padding: \"1vw\",\n            backgroundColor: \"Blue\",\n            color: \"white\",\n            marginLeft: \"3px\"\n          },\n          onClick: () => {\n            setSplitData(inputValue);\n            onSumbit();\n          },\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n};\n_s(Disperse, \"6hUl7JI7T/4wmW1u96KO2fj6jBw=\");\n_c = Disperse;\nexport default Disperse;\nvar _c;\n$RefreshReg$(_c, \"Disperse\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Disperse","_s","inputValue","setInputValue","error","setError","showerror","setshowError","splitdata","setSplitData","showbutton","setShowbutton","showtext","setShowText","onSumbit","errors","duplicateMap","Map","previous","length","isNaN","amount","push","current","address","has","set","get","includes","forEach","index","join","handleCombineBalances","combinedData","counter","duplicateAmount","parseInt","splice","line","KeepFirstOne","filteredData","style","width","height","backgroundColor","display","justifyContent","alignItems","children","padding","fileName","_jsxFileName","lineNumber","columnNumber","gridTemplateColumns","gap","fontSize","map","item","cols","border","borderLeft","value","onChange","e","text","target","lines","split","processedLines","parts","slice","spaceIndex","indexOf","commaIndex","console","log","color","marginRight","onClick","marginLeft","margin","some","errorMessage","startsWith","borderRadius","marginTop","_c","$RefreshReg$"],"sources":["/home/mrblackghost/Documents/Projects/Task/task/src/Disperse.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nconst Disperse = () => {\n  const [inputValue, setInputValue] = useState([]);\n  const [error, setError] = useState(null);\n  const [showerror, setshowError] = useState(false);\n  const [splitdata, setSplitData] = useState([]);\n  const [showbutton, setShowbutton] = useState(false);\n  const [showtext, setShowText] = useState([]);\n\n  // useEffect(() => {\n  //   const tempSplitData =       inputValue\n  //     // const [address, amount] = str.split(/[ ,=]/);\n  //     // return { address, amount: amount || 0, line: index + 1 };\n  //   // });\n\n  //   setShowText(tempSplitData);\n  // }, [inputValue]);\n\n  const onSumbit = () => {\n    setshowError(true);\n\n    const errors = [];\n    const duplicateMap = new Map();\n\n    for (let previous = 0; previous < splitdata.length; previous++) {\n      if (\n        !isNaN(splitdata[previous].amount || splitdata[previous].amount === \"\")\n      ) {\n      } else {\n        errors.push(`Line ${previous + 1} wrong amount`);\n      }\n\n      for (let current = previous + 1; current < splitdata.length; current++) {\n        if (splitdata[previous].address === splitdata[current].address) {\n          if (!duplicateMap.has(splitdata[previous].address)) {\n            duplicateMap.set(splitdata[previous].address, [previous + 1]);\n          }\n          if (\n            !duplicateMap.get(splitdata[previous].address).includes(current + 1)\n          ) {\n            duplicateMap.get(splitdata[previous].address).push(current + 1);\n          }\n        }\n      }\n    }\n    duplicateMap.forEach((index, address) => {\n      errors.push(\n        `Address ${address} has duplicate entries at lines ${index.join(\", \")}`\n      );\n      setShowbutton(true);\n    });\n    if (errors.length > 0) {\n      setError(errors);\n      setshowError(true);\n    } else {\n      setError([]);\n      setShowbutton(false);\n      setshowError(false);\n    }\n  };\n\n  const handleCombineBalances = (index) => {\n    const combinedData = [];\n    let counter = 1;\n\n    for (let previous = 0; previous < splitdata.length; previous++) {\n      for (let current = previous + 1; current < splitdata.length; current++) {\n        if (splitdata[previous].address === splitdata[current].address) {\n          const duplicateAmount = parseInt(splitdata[current].amount, 10); // Parse to integer\n          splitdata[previous].amount = parseInt(splitdata[previous].amount, 10); // Parse to integer\n          splitdata[previous].amount += duplicateAmount;\n          // Remove the duplicate entry\n          splitdata.splice(current, 1);\n          current--; // Adjust the loop index since we removed an element\n        }\n      }\n      // Push non-duplicate items to combinedData\n      combinedData.push({\n        address: splitdata[previous].address,\n        amount: splitdata[previous].amount,\n        line: counter++, // Include the line index\n      });\n    }\n    setShowbutton(false);\n    setSplitData(combinedData);\n  };\n  const KeepFirstOne = () => {\n    const filteredData = [];\n    let counter = 1;\n    for (let previous = 0; previous < splitdata.length; previous++) {\n      for (let current = previous + 1; current < splitdata.length; current++) {\n        if (splitdata[previous].address === splitdata[current].address) {\n          // Remove the duplicate entry\n          splitdata.splice(current, 1);\n          current--; // Adjust the loop index since we removed an element\n        }\n      }\n      // Push non-duplicate items to combinedData\n      filteredData.push({\n        address: splitdata[previous].address,\n        amount: splitdata[previous].amount,\n        line: counter++, // Include the line index\n      });\n    }\n    setShowbutton(false);\n    setSplitData(filteredData);\n  };\n  return (\n    <div\n      style={{\n        width: \"100%\",\n        height: \"100vh\",\n        backgroundColor: \"whitesmoke\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      }}\n    >\n      <div\n        style={{\n          width: \"90%\",\n          height: \"90%\",\n          backgroundColor: \"white\",\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n      >\n        <div style={{ width: \"50%\", height: \"50%\", padding: \"3vw\" }}>\n          <h4>Addresses with Amounts</h4>\n\n          <div\n            style={{\n              display: \"grid\",\n              gridTemplateColumns: \"auto 1fr\",\n              gap: \"10px\",\n              height: \"80%\",\n              backgroundColor: \"#FFCCFF\",\n            }}\n          >\n            <span style={{ fontSize: \"13px\" }}>\n              {splitdata.map((item) => (\n                <div key={item.line}>{item.line}</div>\n              ))}\n            </span>\n            <textarea\n              cols={5}\n              style={{\n                width: \"100%\",\n                height: \"98.5%\",\n                border: \"0px\",\n                borderLeft: \"1px solid grey\",\n                backgroundColor: \"transparent\",\n              }}\n              value={\n                splitdata.length > 0\n                  ? splitdata\n                    .map((item) => `${item.address} ${item.amount}`)\n                    .join(\"\\n\")\n                  : inputValue\n              }\n              onChange={(e) => {\n                setShowText([]);\n                setSplitData([]);\n                \n                const text = e.target.value;\n                \n                // Split the text into lines\n                const lines = text.split(/\\n/);\n                \n                // Process each line individually\n                const processedLines = lines.map((line) => {\n                  // Split based on commas, spaces, or equal signs\n                  const parts = line.split(/[ ,=]/);\n                  const address = parts[0];\n                  let amount = parts.slice(1).join(' '); // Join remaining parts as amount\n                  \n                  // Check if a space or comma comes after the amount and add a newline\n                  const spaceIndex = amount.indexOf(\" \");\n                  const commaIndex = amount.indexOf(\",\");\n                  \n                  if (spaceIndex !== -1 || commaIndex !== -1) {\n                    amount += \"\\n\";\n                  }\n                  \n                  return { address, amount: parseInt(amount) || 0 };\n                });\n                console.log(processedLines)\n                // Update the inputValue state with the processed lines\n                setInputValue(processedLines);\n              }}\n            ></textarea>\n            \n            \n          </div>\n\n          <span style={{ color: \"#7D7C7C\", fontSize: \"13px\" }}>\n            Separated by ','or' 'or'='\n          </span>\n          {showbutton && (\n            <div\n              style={{\n                display: \"flex\",\n                justifyContent: \"flex-end\",\n                alignItems: \"center\",\n                color: \"red\",\n              }}\n            >\n              <button\n                style={{\n                  backgroundColor: \"transparent\",\n                  color: \"red\",\n                  border: \"none\",\n                  marginRight: \"5px\",\n                }}\n                onClick={() => {\n                  KeepFirstOne();\n                  onSumbit();\n                }}\n              >\n                Keep first one\n              </button>\n              |\n              <button\n                style={{\n                  backgroundColor: \"transparent\",\n                  color: \"red\",\n                  border: \"none\",\n                  marginLeft: \"5px\",\n                }}\n                onClick={() => {\n                  handleCombineBalances();\n                  onSumbit();\n                }}\n              >\n                Combine Balance\n              </button>\n            </div>\n          )}\n\n          {showerror && (\n            <div style={{ color: \"red\", fontSize: \"15px\", margin: \"5px 0\" }}>\n              {\" \"}\n              {error.some((errorMessage) => errorMessage.startsWith(\"Address\"))\n                ? \"Duplicated\"\n                : \" \"}\n              <div\n                style={{\n                  border: \"1px solid red\",\n                  borderRadius: \"4px\",\n                  padding: \"2px\",\n                  fontSize: \"15px\",\n                }}\n              >\n                {error.map((errorMessage, index) => (\n                  <p\n                    key={index}\n                    style={{\n                      color: \"red\",\n                    }}\n                  >\n                    {errorMessage}\n                  </p>\n                ))}\n              </div>\n            </div>\n          )}\n\n          <button\n            style={{\n              width: \"100%\",\n              marginTop: \"3vh\",\n              padding: \"1vw\",\n              backgroundColor: \"Blue\",\n              color: \"white\",\n              marginLeft: \"3px\",\n            }}\n            onClick={() => {\n              setSplitData(inputValue);\n              onSumbit();\n            }}\n          >\n            Next\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Disperse;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACU,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACY,SAAS,EAAEC,YAAY,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACc,UAAU,EAAEC,aAAa,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACgB,QAAQ,EAAEC,WAAW,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;;EAE5C;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA,MAAMkB,QAAQ,GAAGA,CAAA,KAAM;IACrBP,YAAY,CAAC,IAAI,CAAC;IAElB,MAAMQ,MAAM,GAAG,EAAE;IACjB,MAAMC,YAAY,GAAG,IAAIC,GAAG,CAAC,CAAC;IAE9B,KAAK,IAAIC,QAAQ,GAAG,CAAC,EAAEA,QAAQ,GAAGV,SAAS,CAACW,MAAM,EAAED,QAAQ,EAAE,EAAE;MAC9D,IACE,CAACE,KAAK,CAACZ,SAAS,CAACU,QAAQ,CAAC,CAACG,MAAM,IAAIb,SAAS,CAACU,QAAQ,CAAC,CAACG,MAAM,KAAK,EAAE,CAAC,EACvE,CACF,CAAC,MAAM;QACLN,MAAM,CAACO,IAAI,CAAE,QAAOJ,QAAQ,GAAG,CAAE,eAAc,CAAC;MAClD;MAEA,KAAK,IAAIK,OAAO,GAAGL,QAAQ,GAAG,CAAC,EAAEK,OAAO,GAAGf,SAAS,CAACW,MAAM,EAAEI,OAAO,EAAE,EAAE;QACtE,IAAIf,SAAS,CAACU,QAAQ,CAAC,CAACM,OAAO,KAAKhB,SAAS,CAACe,OAAO,CAAC,CAACC,OAAO,EAAE;UAC9D,IAAI,CAACR,YAAY,CAACS,GAAG,CAACjB,SAAS,CAACU,QAAQ,CAAC,CAACM,OAAO,CAAC,EAAE;YAClDR,YAAY,CAACU,GAAG,CAAClB,SAAS,CAACU,QAAQ,CAAC,CAACM,OAAO,EAAE,CAACN,QAAQ,GAAG,CAAC,CAAC,CAAC;UAC/D;UACA,IACE,CAACF,YAAY,CAACW,GAAG,CAACnB,SAAS,CAACU,QAAQ,CAAC,CAACM,OAAO,CAAC,CAACI,QAAQ,CAACL,OAAO,GAAG,CAAC,CAAC,EACpE;YACAP,YAAY,CAACW,GAAG,CAACnB,SAAS,CAACU,QAAQ,CAAC,CAACM,OAAO,CAAC,CAACF,IAAI,CAACC,OAAO,GAAG,CAAC,CAAC;UACjE;QACF;MACF;IACF;IACAP,YAAY,CAACa,OAAO,CAAC,CAACC,KAAK,EAAEN,OAAO,KAAK;MACvCT,MAAM,CAACO,IAAI,CACR,WAAUE,OAAQ,mCAAkCM,KAAK,CAACC,IAAI,CAAC,IAAI,CAAE,EACxE,CAAC;MACDpB,aAAa,CAAC,IAAI,CAAC;IACrB,CAAC,CAAC;IACF,IAAII,MAAM,CAACI,MAAM,GAAG,CAAC,EAAE;MACrBd,QAAQ,CAACU,MAAM,CAAC;MAChBR,YAAY,CAAC,IAAI,CAAC;IACpB,CAAC,MAAM;MACLF,QAAQ,CAAC,EAAE,CAAC;MACZM,aAAa,CAAC,KAAK,CAAC;MACpBJ,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EAED,MAAMyB,qBAAqB,GAAIF,KAAK,IAAK;IACvC,MAAMG,YAAY,GAAG,EAAE;IACvB,IAAIC,OAAO,GAAG,CAAC;IAEf,KAAK,IAAIhB,QAAQ,GAAG,CAAC,EAAEA,QAAQ,GAAGV,SAAS,CAACW,MAAM,EAAED,QAAQ,EAAE,EAAE;MAC9D,KAAK,IAAIK,OAAO,GAAGL,QAAQ,GAAG,CAAC,EAAEK,OAAO,GAAGf,SAAS,CAACW,MAAM,EAAEI,OAAO,EAAE,EAAE;QACtE,IAAIf,SAAS,CAACU,QAAQ,CAAC,CAACM,OAAO,KAAKhB,SAAS,CAACe,OAAO,CAAC,CAACC,OAAO,EAAE;UAC9D,MAAMW,eAAe,GAAGC,QAAQ,CAAC5B,SAAS,CAACe,OAAO,CAAC,CAACF,MAAM,EAAE,EAAE,CAAC,CAAC,CAAC;UACjEb,SAAS,CAACU,QAAQ,CAAC,CAACG,MAAM,GAAGe,QAAQ,CAAC5B,SAAS,CAACU,QAAQ,CAAC,CAACG,MAAM,EAAE,EAAE,CAAC,CAAC,CAAC;UACvEb,SAAS,CAACU,QAAQ,CAAC,CAACG,MAAM,IAAIc,eAAe;UAC7C;UACA3B,SAAS,CAAC6B,MAAM,CAACd,OAAO,EAAE,CAAC,CAAC;UAC5BA,OAAO,EAAE,CAAC,CAAC;QACb;MACF;MACA;MACAU,YAAY,CAACX,IAAI,CAAC;QAChBE,OAAO,EAAEhB,SAAS,CAACU,QAAQ,CAAC,CAACM,OAAO;QACpCH,MAAM,EAAEb,SAAS,CAACU,QAAQ,CAAC,CAACG,MAAM;QAClCiB,IAAI,EAAEJ,OAAO,EAAE,CAAE;MACnB,CAAC,CAAC;IACJ;;IACAvB,aAAa,CAAC,KAAK,CAAC;IACpBF,YAAY,CAACwB,YAAY,CAAC;EAC5B,CAAC;EACD,MAAMM,YAAY,GAAGA,CAAA,KAAM;IACzB,MAAMC,YAAY,GAAG,EAAE;IACvB,IAAIN,OAAO,GAAG,CAAC;IACf,KAAK,IAAIhB,QAAQ,GAAG,CAAC,EAAEA,QAAQ,GAAGV,SAAS,CAACW,MAAM,EAAED,QAAQ,EAAE,EAAE;MAC9D,KAAK,IAAIK,OAAO,GAAGL,QAAQ,GAAG,CAAC,EAAEK,OAAO,GAAGf,SAAS,CAACW,MAAM,EAAEI,OAAO,EAAE,EAAE;QACtE,IAAIf,SAAS,CAACU,QAAQ,CAAC,CAACM,OAAO,KAAKhB,SAAS,CAACe,OAAO,CAAC,CAACC,OAAO,EAAE;UAC9D;UACAhB,SAAS,CAAC6B,MAAM,CAACd,OAAO,EAAE,CAAC,CAAC;UAC5BA,OAAO,EAAE,CAAC,CAAC;QACb;MACF;MACA;MACAiB,YAAY,CAAClB,IAAI,CAAC;QAChBE,OAAO,EAAEhB,SAAS,CAACU,QAAQ,CAAC,CAACM,OAAO;QACpCH,MAAM,EAAEb,SAAS,CAACU,QAAQ,CAAC,CAACG,MAAM;QAClCiB,IAAI,EAAEJ,OAAO,EAAE,CAAE;MACnB,CAAC,CAAC;IACJ;;IACAvB,aAAa,CAAC,KAAK,CAAC;IACpBF,YAAY,CAAC+B,YAAY,CAAC;EAC5B,CAAC;EACD,oBACEzC,OAAA;IACE0C,KAAK,EAAE;MACLC,KAAK,EAAE,MAAM;MACbC,MAAM,EAAE,OAAO;MACfC,eAAe,EAAE,YAAY;MAC7BC,OAAO,EAAE,MAAM;MACfC,cAAc,EAAE,QAAQ;MACxBC,UAAU,EAAE;IACd,CAAE;IAAAC,QAAA,eAEFjD,OAAA;MACE0C,KAAK,EAAE;QACLC,KAAK,EAAE,KAAK;QACZC,MAAM,EAAE,KAAK;QACbC,eAAe,EAAE,OAAO;QACxBC,OAAO,EAAE,MAAM;QACfC,cAAc,EAAE,QAAQ;QACxBC,UAAU,EAAE;MACd,CAAE;MAAAC,QAAA,eAEFjD,OAAA;QAAK0C,KAAK,EAAE;UAAEC,KAAK,EAAE,KAAK;UAAEC,MAAM,EAAE,KAAK;UAAEM,OAAO,EAAE;QAAM,CAAE;QAAAD,QAAA,gBAC1DjD,OAAA;UAAAiD,QAAA,EAAI;QAAsB;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAE/BtD,OAAA;UACE0C,KAAK,EAAE;YACLI,OAAO,EAAE,MAAM;YACfS,mBAAmB,EAAE,UAAU;YAC/BC,GAAG,EAAE,MAAM;YACXZ,MAAM,EAAE,KAAK;YACbC,eAAe,EAAE;UACnB,CAAE;UAAAI,QAAA,gBAEFjD,OAAA;YAAM0C,KAAK,EAAE;cAAEe,QAAQ,EAAE;YAAO,CAAE;YAAAR,QAAA,EAC/BxC,SAAS,CAACiD,GAAG,CAAEC,IAAI,iBAClB3D,OAAA;cAAAiD,QAAA,EAAsBU,IAAI,CAACpB;YAAI,GAArBoB,IAAI,CAACpB,IAAI;cAAAY,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAkB,CACtC;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACE,CAAC,eACPtD,OAAA;YACE4D,IAAI,EAAE,CAAE;YACRlB,KAAK,EAAE;cACLC,KAAK,EAAE,MAAM;cACbC,MAAM,EAAE,OAAO;cACfiB,MAAM,EAAE,KAAK;cACbC,UAAU,EAAE,gBAAgB;cAC5BjB,eAAe,EAAE;YACnB,CAAE;YACFkB,KAAK,EACHtD,SAAS,CAACW,MAAM,GAAG,CAAC,GAChBX,SAAS,CACRiD,GAAG,CAAEC,IAAI,IAAM,GAAEA,IAAI,CAAClC,OAAQ,IAAGkC,IAAI,CAACrC,MAAO,EAAC,CAAC,CAC/CU,IAAI,CAAC,IAAI,CAAC,GACX7B,UACL;YACD6D,QAAQ,EAAGC,CAAC,IAAK;cACfnD,WAAW,CAAC,EAAE,CAAC;cACfJ,YAAY,CAAC,EAAE,CAAC;cAEhB,MAAMwD,IAAI,GAAGD,CAAC,CAACE,MAAM,CAACJ,KAAK;;cAE3B;cACA,MAAMK,KAAK,GAAGF,IAAI,CAACG,KAAK,CAAC,IAAI,CAAC;;cAE9B;cACA,MAAMC,cAAc,GAAGF,KAAK,CAACV,GAAG,CAAEnB,IAAI,IAAK;gBACzC;gBACA,MAAMgC,KAAK,GAAGhC,IAAI,CAAC8B,KAAK,CAAC,OAAO,CAAC;gBACjC,MAAM5C,OAAO,GAAG8C,KAAK,CAAC,CAAC,CAAC;gBACxB,IAAIjD,MAAM,GAAGiD,KAAK,CAACC,KAAK,CAAC,CAAC,CAAC,CAACxC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;;gBAEvC;gBACA,MAAMyC,UAAU,GAAGnD,MAAM,CAACoD,OAAO,CAAC,GAAG,CAAC;gBACtC,MAAMC,UAAU,GAAGrD,MAAM,CAACoD,OAAO,CAAC,GAAG,CAAC;gBAEtC,IAAID,UAAU,KAAK,CAAC,CAAC,IAAIE,UAAU,KAAK,CAAC,CAAC,EAAE;kBAC1CrD,MAAM,IAAI,IAAI;gBAChB;gBAEA,OAAO;kBAAEG,OAAO;kBAAEH,MAAM,EAAEe,QAAQ,CAACf,MAAM,CAAC,IAAI;gBAAE,CAAC;cACnD,CAAC,CAAC;cACFsD,OAAO,CAACC,GAAG,CAACP,cAAc,CAAC;cAC3B;cACAlE,aAAa,CAACkE,cAAc,CAAC;YAC/B;UAAE;YAAAnB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACO,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAGT,CAAC,eAENtD,OAAA;UAAM0C,KAAK,EAAE;YAAEoC,KAAK,EAAE,SAAS;YAAErB,QAAQ,EAAE;UAAO,CAAE;UAAAR,QAAA,EAAC;QAErD;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,EACN3C,UAAU,iBACTX,OAAA;UACE0C,KAAK,EAAE;YACLI,OAAO,EAAE,MAAM;YACfC,cAAc,EAAE,UAAU;YAC1BC,UAAU,EAAE,QAAQ;YACpB8B,KAAK,EAAE;UACT,CAAE;UAAA7B,QAAA,gBAEFjD,OAAA;YACE0C,KAAK,EAAE;cACLG,eAAe,EAAE,aAAa;cAC9BiC,KAAK,EAAE,KAAK;cACZjB,MAAM,EAAE,MAAM;cACdkB,WAAW,EAAE;YACf,CAAE;YACFC,OAAO,EAAEA,CAAA,KAAM;cACbxC,YAAY,CAAC,CAAC;cACdzB,QAAQ,CAAC,CAAC;YACZ,CAAE;YAAAkC,QAAA,EACH;UAED;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,KAET,eAAAtD,OAAA;YACE0C,KAAK,EAAE;cACLG,eAAe,EAAE,aAAa;cAC9BiC,KAAK,EAAE,KAAK;cACZjB,MAAM,EAAE,MAAM;cACdoB,UAAU,EAAE;YACd,CAAE;YACFD,OAAO,EAAEA,CAAA,KAAM;cACb/C,qBAAqB,CAAC,CAAC;cACvBlB,QAAQ,CAAC,CAAC;YACZ,CAAE;YAAAkC,QAAA,EACH;UAED;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CACN,EAEA/C,SAAS,iBACRP,OAAA;UAAK0C,KAAK,EAAE;YAAEoC,KAAK,EAAE,KAAK;YAAErB,QAAQ,EAAE,MAAM;YAAEyB,MAAM,EAAE;UAAQ,CAAE;UAAAjC,QAAA,GAC7D,GAAG,EACH5C,KAAK,CAAC8E,IAAI,CAAEC,YAAY,IAAKA,YAAY,CAACC,UAAU,CAAC,SAAS,CAAC,CAAC,GAC7D,YAAY,GACZ,GAAG,eACPrF,OAAA;YACE0C,KAAK,EAAE;cACLmB,MAAM,EAAE,eAAe;cACvByB,YAAY,EAAE,KAAK;cACnBpC,OAAO,EAAE,KAAK;cACdO,QAAQ,EAAE;YACZ,CAAE;YAAAR,QAAA,EAED5C,KAAK,CAACqD,GAAG,CAAC,CAAC0B,YAAY,EAAErD,KAAK,kBAC7B/B,OAAA;cAEE0C,KAAK,EAAE;gBACLoC,KAAK,EAAE;cACT,CAAE;cAAA7B,QAAA,EAEDmC;YAAY,GALRrD,KAAK;cAAAoB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAMT,CACJ;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACC,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CACN,eAEDtD,OAAA;UACE0C,KAAK,EAAE;YACLC,KAAK,EAAE,MAAM;YACb4C,SAAS,EAAE,KAAK;YAChBrC,OAAO,EAAE,KAAK;YACdL,eAAe,EAAE,MAAM;YACvBiC,KAAK,EAAE,OAAO;YACdG,UAAU,EAAE;UACd,CAAE;UACFD,OAAO,EAAEA,CAAA,KAAM;YACbtE,YAAY,CAACP,UAAU,CAAC;YACxBY,QAAQ,CAAC,CAAC;UACZ,CAAE;UAAAkC,QAAA,EACH;QAED;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACpD,EAAA,CA/RID,QAAQ;AAAAuF,EAAA,GAARvF,QAAQ;AAiSd,eAAeA,QAAQ;AAAC,IAAAuF,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}