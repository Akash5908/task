{"ast":null,"code":"const onSubmit = e => {\n  e.preventDefault();\n\n  // Reset errors\n  setErrors([]);\n\n  // Split the input into address and amount pairs\n  const pairs = input.split(', ');\n  const newAddresses = [];\n  const newAmounts = [];\n  const newErrors = [];\n  const uniqueAddresses = new Set(); // To track unique addresses\n\n  pairs.forEach((pair, index) => {\n    const [address, amount] = pair.split('=');\n    if (address && !isNaN(amount)) {\n      if (uniqueAddresses.has(address)) {\n        // If address is already in the Set, it's a duplicate\n        newErrors.push(`Duplicate address on line ${index + 1}: ${address}`);\n      } else {\n        uniqueAddresses.add(address);\n        newAddresses.push(address);\n        newAmounts.push(amount);\n      }\n    } else {\n      newErrors.push(`Invalid pair on line ${index + 1}: ${pair}`);\n    }\n  });\n  if (newErrors.length > 0) {\n    setErrors(newErrors);\n  } else {\n    setAddresses(newAddresses);\n    setAmounts(newAmounts);\n  }\n};","map":{"version":3,"names":["onSubmit","e","preventDefault","setErrors","pairs","input","split","newAddresses","newAmounts","newErrors","uniqueAddresses","Set","forEach","pair","index","address","amount","isNaN","has","push","add","length","setAddresses","setAmounts"],"sources":["/home/mrblackghost/Documents/Projects/Task/task/src/Disperse.js"],"sourcesContent":["const onSubmit = (e) => {\n    e.preventDefault();\n  \n    // Reset errors\n    setErrors([]);\n  \n    // Split the input into address and amount pairs\n    const pairs = input.split(', ');\n    const newAddresses = [];\n    const newAmounts = [];\n    const newErrors = [];\n    const uniqueAddresses = new Set(); // To track unique addresses\n  \n    pairs.forEach((pair, index) => {\n      const [address, amount] = pair.split('=');\n  \n      if (address && !isNaN(amount)) {\n        if (uniqueAddresses.has(address)) {\n          // If address is already in the Set, it's a duplicate\n          newErrors.push(`Duplicate address on line ${index + 1}: ${address}`);\n        } else {\n          uniqueAddresses.add(address);\n          newAddresses.push(address);\n          newAmounts.push(amount);\n        }\n      } else {\n        newErrors.push(`Invalid pair on line ${index + 1}: ${pair}`);\n      }\n    });\n  \n    if (newErrors.length > 0) {\n      setErrors(newErrors);\n    } else {\n      setAddresses(newAddresses);\n      setAmounts(newAmounts);\n    }\n  };\n  "],"mappings":"AAAA,MAAMA,QAAQ,GAAIC,CAAC,IAAK;EACpBA,CAAC,CAACC,cAAc,CAAC,CAAC;;EAElB;EACAC,SAAS,CAAC,EAAE,CAAC;;EAEb;EACA,MAAMC,KAAK,GAAGC,KAAK,CAACC,KAAK,CAAC,IAAI,CAAC;EAC/B,MAAMC,YAAY,GAAG,EAAE;EACvB,MAAMC,UAAU,GAAG,EAAE;EACrB,MAAMC,SAAS,GAAG,EAAE;EACpB,MAAMC,eAAe,GAAG,IAAIC,GAAG,CAAC,CAAC,CAAC,CAAC;;EAEnCP,KAAK,CAACQ,OAAO,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAK;IAC7B,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,GAAGH,IAAI,CAACP,KAAK,CAAC,GAAG,CAAC;IAEzC,IAAIS,OAAO,IAAI,CAACE,KAAK,CAACD,MAAM,CAAC,EAAE;MAC7B,IAAIN,eAAe,CAACQ,GAAG,CAACH,OAAO,CAAC,EAAE;QAChC;QACAN,SAAS,CAACU,IAAI,CAAE,6BAA4BL,KAAK,GAAG,CAAE,KAAIC,OAAQ,EAAC,CAAC;MACtE,CAAC,MAAM;QACLL,eAAe,CAACU,GAAG,CAACL,OAAO,CAAC;QAC5BR,YAAY,CAACY,IAAI,CAACJ,OAAO,CAAC;QAC1BP,UAAU,CAACW,IAAI,CAACH,MAAM,CAAC;MACzB;IACF,CAAC,MAAM;MACLP,SAAS,CAACU,IAAI,CAAE,wBAAuBL,KAAK,GAAG,CAAE,KAAID,IAAK,EAAC,CAAC;IAC9D;EACF,CAAC,CAAC;EAEF,IAAIJ,SAAS,CAACY,MAAM,GAAG,CAAC,EAAE;IACxBlB,SAAS,CAACM,SAAS,CAAC;EACtB,CAAC,MAAM;IACLa,YAAY,CAACf,YAAY,CAAC;IAC1BgB,UAAU,CAACf,UAAU,CAAC;EACxB;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}