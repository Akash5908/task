{"ast":null,"code":"var _jsxFileName = \"/home/mrblackghost/Documents/Projects/Task/task/src/Disperse.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Disperse = () => {\n  _s();\n  const [inputValue, setInputValue] = useState([]);\n  const [error, setError] = useState(null);\n  const [showerror, setshowError] = useState(false);\n  const [splitdata, setSplitData] = useState([]);\n  const [showbutton, setShowbutton] = useState(false);\n  const [showtext, setShowText] = useState([]);\n  useEffect(() => {\n    const tempSplitData = inputValue.map((str, index) => {\n      const [address, amount] = str.split(/[ ,=]/);\n      return {\n        address,\n        amount: amount,\n        line: index + 1\n      };\n    });\n    setShowText(tempSplitData);\n\n    // Check for errors when the input data changes\n    const errors = [];\n    const duplicateMap = new Map();\n    for (let previous = 0; previous < tempSplitData.length; previous++) {\n      if (!isNaN(tempSplitData[previous].amount || tempSplitData[previous].amount === \"\")) {\n        // Check for duplicate addresses\n        for (let current = previous + 1; current < tempSplitData.length; current++) {\n          if (tempSplitData[previous].address === tempSplitData[current].address) {\n            if (!duplicateMap.has(tempSplitData[previous].address)) {\n              duplicateMap.set(tempSplitData[previous].address, [previous + 1]);\n            }\n            if (!duplicateMap.get(tempSplitData[previous].address).includes(current + 1)) {\n              duplicateMap.get(tempSplitData[previous].address).push(current + 1);\n            }\n          }\n        }\n      } else {\n        errors.push(`Line ${tempSplitData[previous].line} wrong amount`);\n      }\n    }\n    duplicateMap.forEach((index, address) => {\n      errors.push(`Address ${address} has duplicate entries at lines ${index.join(\", \")}`);\n      setShowbutton(true); // Show the buttons if there are no errors\n    });\n\n    if (errors.length > 0) {\n      setError(errors);\n    } else {\n      setError([]);\n      setshowError(false);\n    }\n  }, [inputValue]);\n  const onSumbit = () => {\n    const errors = [];\n    const duplicateMap = new Map();\n    for (let previous = 0; previous < splitdata.length; previous++) {\n      if (!isNaN(splitdata[previous].amount || splitdata[previous].amount === \"\")) {\n        // Check for duplicate addresses\n        for (let current = previous + 1; current < splitdata.length; current++) {\n          if (splitdata[previous].address === splitdata[current].address) {\n            if (!duplicateMap.has(splitdata[previous].address)) {\n              duplicateMap.set(splitdata[previous].address, [previous + 1]);\n            }\n            if (!duplicateMap.get(splitdata[previous].address).includes(current + 1)) {\n              duplicateMap.get(splitdata[previous].address).push(current + 1);\n            }\n          }\n        }\n      } else {\n        errors.push(`Line ${splitdata[previous].line} wrong amount`);\n      }\n    }\n    duplicateMap.forEach((index, address) => {\n      errors.push(`Address ${address} has duplicate entries at lines ${index.join(\", \")}`);\n      // setShowbutton(true); // Show the buttons if there are no errors\n    });\n\n    if (error.length > 0) {\n      setError(error);\n      setshowError(true);\n    } else {\n      setError([]);\n      setshowError(false);\n      setShowbutton(false);\n    }\n  };\n  const handleCombineBalances = index => {\n    const combinedData = [];\n    let counter = 1;\n    for (let previous = 0; previous < splitdata.length; previous++) {\n      for (let current = previous + 1; current < splitdata.length; current++) {\n        if (splitdata[previous].address === splitdata[current].address) {\n          const duplicateAmount = parseInt(splitdata[current].amount, 10); // Parse to integer\n          splitdata[previous].amount = parseInt(splitdata[previous].amount, 10); // Parse to integer\n          splitdata[previous].amount += duplicateAmount;\n          // Remove the duplicate entry\n          splitdata.splice(current, 1);\n          current--; // Adjust the loop index since we removed an element\n        }\n      }\n      // Push non-duplicate items to combinedData\n      combinedData.push({\n        address: splitdata[previous].address,\n        amount: splitdata[previous].amount,\n        line: counter++ // Include the line index\n      });\n    }\n\n    setShowbutton(false);\n    setSplitData(combinedData);\n  };\n  const KeepFirstOne = () => {\n    const filteredData = [];\n    let counter = 1;\n    for (let previous = 0; previous < splitdata.length; previous++) {\n      for (let current = previous + 1; current < splitdata.length; current++) {\n        if (splitdata[previous].address === splitdata[current].address) {\n          // Remove the duplicate entry\n          splitdata.splice(current, 1);\n          current--; // Adjust the loop index since we removed an element\n        }\n      }\n      // Push non-duplicate items to combinedData\n      filteredData.push({\n        address: splitdata[previous].address,\n        amount: splitdata[previous].amount,\n        line: counter++ // Include the line index\n      });\n    }\n\n    setShowbutton(false);\n    setSplitData(filteredData);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100%\",\n      height: \"100vh\",\n      backgroundColor: \"whitesmoke\",\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"90%\",\n        height: \"90%\",\n        backgroundColor: \"white\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: \"50%\",\n          height: \"50%\",\n          padding: \"3vw\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Addresses with Amounts\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"grid\",\n            gridTemplateColumns: \"auto 1fr\",\n            gap: \"10px\",\n            height: \"80%\",\n            backgroundColor: \"#FFCCFF\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              fontSize: \"15px\"\n            },\n            children: splitdata.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n              children: item.line\n            }, item.line, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            cols: 5,\n            style: {\n              width: \"100%\",\n              height: \"98.5%\",\n              border: \"0px\",\n              borderLeft: \"1px solid grey\",\n              backgroundColor: \"transparent\"\n            },\n            value: splitdata.length > 0 ? splitdata.map(item => `${item.address} ${item.amount}`).join(\"\\n\") : inputValue,\n            onChange: e => {\n              setShowText([]);\n              setSplitData([]);\n              setInputValue([]);\n              const text = e.target.value;\n              if (text.includes(\",\")) {\n                // Replace commas with newlines\n                const newText = text.replace(/,/g, \"\\n\");\n                setInputValue(newText.split(\"\\n\"));\n              } else {\n                setInputValue(text.split(\"\\n\"));\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: \"#7D7C7C\",\n            fontSize: \"13px\"\n          },\n          children: \"Separated by ','or' 'or'='\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 11\n        }, this), showbutton && showerror && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            justifyContent: \"flex-end\",\n            alignItems: \"center\",\n            color: \"red\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            style: {\n              backgroundColor: \"transparent\",\n              color: \"red\",\n              border: \"none\",\n              marginRight: \"5px\"\n            },\n            onClick: () => {\n              KeepFirstOne();\n              setShowbutton(false);\n            },\n            children: \"Keep first one\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 15\n          }, this), \"|\", /*#__PURE__*/_jsxDEV(\"button\", {\n            style: {\n              backgroundColor: \"transparent\",\n              color: \"red\",\n              border: \"none\",\n              marginLeft: \"5px\"\n            },\n            onClick: () => {\n              handleCombineBalances();\n              setShowbutton(false);\n            },\n            children: \"Combine Balance\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 13\n        }, this), showerror && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            color: \"red\",\n            fontSize: \"15px\",\n            margin: \"5px 0\"\n          },\n          children: [showbutton ? \"Duplicated\" : \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              border: \"1px solid red\",\n              borderRadius: \"4px\",\n              padding: \"2px\",\n              fontSize: \"15px\"\n            },\n            children: error.map((errorMessage, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n              style: {\n                color: \"red\"\n              },\n              children: errorMessage\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 262,\n              columnNumber: 9\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 5\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 3\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            width: \"100%\",\n            marginTop: \"3vh\",\n            padding: \"1vw\",\n            backgroundColor: \"Blue\",\n            color: \"white\",\n            marginLeft: \"3px\"\n          },\n          onClick: () => {\n            setSplitData(showtext);\n            onSumbit();\n          },\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 5\n  }, this);\n};\n_s(Disperse, \"n6lKU/73z7B8kEQk1IC5VHhuEJI=\");\n_c = Disperse;\nexport default Disperse;\nvar _c;\n$RefreshReg$(_c, \"Disperse\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Disperse","_s","inputValue","setInputValue","error","setError","showerror","setshowError","splitdata","setSplitData","showbutton","setShowbutton","showtext","setShowText","tempSplitData","map","str","index","address","amount","split","line","errors","duplicateMap","Map","previous","length","isNaN","current","has","set","get","includes","push","forEach","join","onSumbit","handleCombineBalances","combinedData","counter","duplicateAmount","parseInt","splice","KeepFirstOne","filteredData","style","width","height","backgroundColor","display","justifyContent","alignItems","children","padding","fileName","_jsxFileName","lineNumber","columnNumber","gridTemplateColumns","gap","fontSize","item","cols","border","borderLeft","value","onChange","e","text","target","newText","replace","color","marginRight","onClick","marginLeft","margin","borderRadius","errorMessage","marginTop","_c","$RefreshReg$"],"sources":["/home/mrblackghost/Documents/Projects/Task/task/src/Disperse.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nconst Disperse = () => {\n  const [inputValue, setInputValue] = useState([]);\n  const [error, setError] = useState(null);\n  const [showerror, setshowError] = useState(false);\n  const [splitdata, setSplitData] = useState([]);\n  const [showbutton, setShowbutton] = useState(false);\n  const [showtext, setShowText] = useState([]);\n\n  useEffect(() => {\n    const tempSplitData = inputValue.map((str, index) => {\n      const [address, amount] = str.split(/[ ,=]/);\n      return { address, amount: amount, line: index + 1 };\n    });\n\n    setShowText(tempSplitData);\n\n    // Check for errors when the input data changes\n    const errors = [];\n    const duplicateMap = new Map();\n\n    for (let previous = 0; previous < tempSplitData.length; previous++) {\n      if (!isNaN(tempSplitData[previous].amount || tempSplitData[previous].amount === \"\")) {\n        // Check for duplicate addresses\n        for (let current = previous + 1; current < tempSplitData.length; current++) {\n          if (tempSplitData[previous].address === tempSplitData[current].address) {\n            if (!duplicateMap.has(tempSplitData[previous].address)) {\n              duplicateMap.set(tempSplitData[previous].address, [previous + 1]);\n            }\n            if (!duplicateMap.get(tempSplitData[previous].address).includes(current + 1)) {\n              duplicateMap.get(tempSplitData[previous].address).push(current + 1);\n            }\n          }\n        }\n      } else {\n        errors.push(`Line ${tempSplitData[previous].line} wrong amount`);\n      }\n    }\n\n    duplicateMap.forEach((index, address) => {\n      errors.push(`Address ${address} has duplicate entries at lines ${index.join(\", \")}`);\n      setShowbutton(true); // Show the buttons if there are no errors\n    });\n\n    if (errors.length > 0) {\n      setError(errors);\n    } else {\n      setError([]);\n      setshowError(false);\n    }\n  }, [inputValue]);\n\n  const onSumbit = () => {\n    const errors = [];\n    const duplicateMap = new Map();\n\n    for (let previous = 0; previous < splitdata.length; previous++) {\n      if (!isNaN(splitdata[previous].amount || splitdata[previous].amount === \"\")) {\n        // Check for duplicate addresses\n        for (let current = previous + 1; current < splitdata.length; current++) {\n          if (splitdata[previous].address === splitdata[current].address) {\n            if (!duplicateMap.has(splitdata[previous].address)) {\n              duplicateMap.set(splitdata[previous].address, [previous + 1]);\n            }\n            if (!duplicateMap.get(splitdata[previous].address).includes(current + 1)) {\n              duplicateMap.get(splitdata[previous].address).push(current + 1);\n            }\n          }\n        }\n      } else {\n        errors.push(`Line ${splitdata[previous].line} wrong amount`);\n      }\n    }\n\n    duplicateMap.forEach((index, address) => {\n      errors.push(`Address ${address} has duplicate entries at lines ${index.join(\", \")}`);\n      // setShowbutton(true); // Show the buttons if there are no errors\n    });\n    if (error.length > 0) {\n      setError(error);\n      setshowError(true);\n    } else {\n      setError([]);\n      setshowError(false);\n      setShowbutton(false)\n    }\n  };\n\n  const handleCombineBalances = (index) => {\n    const combinedData = [];\n    let counter = 1;\n\n    for (let previous = 0; previous < splitdata.length; previous++) {\n      for (let current = previous + 1; current < splitdata.length; current++) {\n        if (splitdata[previous].address === splitdata[current].address) {\n          const duplicateAmount = parseInt(splitdata[current].amount, 10); // Parse to integer\n          splitdata[previous].amount = parseInt(splitdata[previous].amount, 10); // Parse to integer\n          splitdata[previous].amount += duplicateAmount;\n          // Remove the duplicate entry\n          splitdata.splice(current, 1);\n          current--; // Adjust the loop index since we removed an element\n        }\n      }\n      // Push non-duplicate items to combinedData\n      combinedData.push({\n        address: splitdata[previous].address,\n        amount: splitdata[previous].amount,\n        line: counter++, // Include the line index\n      });\n    }\n    setShowbutton(false);\n    setSplitData(combinedData);\n  };\n  const KeepFirstOne = () => {\n    const filteredData = [];\n    let counter = 1;\n    for (let previous = 0; previous < splitdata.length; previous++) {\n      for (let current = previous + 1; current < splitdata.length; current++) {\n        if (splitdata[previous].address === splitdata[current].address) {\n          // Remove the duplicate entry\n          splitdata.splice(current, 1);\n          current--; // Adjust the loop index since we removed an element\n        }\n      }\n      // Push non-duplicate items to combinedData\n      filteredData.push({\n        address: splitdata[previous].address,\n        amount: splitdata[previous].amount,\n        line: counter++, // Include the line index\n      });\n    }\n    setShowbutton(false);\n    setSplitData(filteredData);\n  };\n  return (\n    <div\n      style={{\n        width: \"100%\",\n        height: \"100vh\",\n        backgroundColor: \"whitesmoke\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      }}\n    >\n      <div\n        style={{\n          width: \"90%\",\n          height: \"90%\",\n          backgroundColor: \"white\",\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n      >\n        <div style={{ width: \"50%\", height: \"50%\", padding: \"3vw\" }}>\n          <h4>Addresses with Amounts</h4>\n\n          <div\n            style={{\n              display: \"grid\",\n              gridTemplateColumns: \"auto 1fr\",\n              gap: \"10px\",\n              height: \"80%\",\n              backgroundColor: \"#FFCCFF\",\n            }}\n          >\n            <span style={{ fontSize: \"15px\" }}>\n              {splitdata.map((item) => (\n                <div key={item.line}>{item.line}</div>\n              ))}\n            </span>\n            <textarea\n              cols={5}\n              style={{\n                width: \"100%\",\n                height: \"98.5%\",\n                border: \"0px\",\n                borderLeft: \"1px solid grey\",\n                backgroundColor: \"transparent\",\n              }}\n              value={\n                splitdata.length > 0\n                  ? splitdata\n                      .map((item) => `${item.address} ${item.amount}`)\n                      .join(\"\\n\")\n                  : inputValue\n              }\n              onChange={(e) => {\n                setShowText([]);\n                setSplitData([]);\n                setInputValue([]);\n                const text = e.target.value;\n                if (text.includes(\",\")) {\n                  // Replace commas with newlines\n                  const newText = text.replace(/,/g, \"\\n\");\n                  setInputValue(newText.split(\"\\n\"));\n                } else {\n                  setInputValue(text.split(\"\\n\"));\n                }\n              }}\n            ></textarea>\n          </div>\n\n          <span style={{ color: \"#7D7C7C\", fontSize: \"13px\" }}>\n            Separated by ','or' 'or'='\n          </span>\n          {showbutton && showerror && (\n            <div\n              style={{\n                display: \"flex\",\n                justifyContent: \"flex-end\",\n                alignItems: \"center\",\n                color: \"red\",\n              }}\n            >\n              <button\n                style={{\n                  backgroundColor: \"transparent\",\n                  color: \"red\",\n                  border: \"none\",\n                  marginRight: \"5px\",\n                }}\n                onClick={() => {\n                  KeepFirstOne();\n                  setShowbutton(false)\n                }}\n              >\n                Keep first one\n              </button>\n              |\n              <button\n                style={{\n                  backgroundColor: \"transparent\",\n                  color: \"red\",\n                  border: \"none\",\n                  marginLeft: \"5px\",\n                }}\n                onClick={() => {\n                  handleCombineBalances();\n                  setShowbutton(false)\n                }}\n              >\n                Combine Balance\n              </button>\n            </div>\n          )}\n\n{showerror && (\n  <div style={{ color: \"red\", fontSize: \"15px\", margin: \"5px 0\" }}>\n    {showbutton ? \"Duplicated\" : \" \"}\n    <div\n      style={{\n        border: \"1px solid red\",\n        borderRadius: \"4px\",\n        padding: \"2px\",\n        fontSize: \"15px\",\n      }}\n    >\n      {error.map((errorMessage, index) => (\n        <p\n          key={index}\n          style={{\n            color: \"red\",\n          }}\n        >\n          {errorMessage}\n        </p>\n      ))}\n    </div>\n  </div>\n)}\n\n          <button\n            style={{\n              width: \"100%\",\n              marginTop: \"3vh\",\n              padding: \"1vw\",\n              backgroundColor: \"Blue\",\n              color: \"white\",\n              marginLeft: \"3px\",\n            }}\n            onClick={() => {\n              setSplitData(showtext);\n              onSumbit();\n            }}\n          >\n            Next\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Disperse;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}