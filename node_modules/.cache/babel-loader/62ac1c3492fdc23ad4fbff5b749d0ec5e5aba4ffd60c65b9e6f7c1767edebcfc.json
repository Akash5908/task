{"ast":null,"code":"var _jsxFileName = \"/home/mrblackghost/Documents/Projects/Task/task/src/Disperse.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffe } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Disperse = () => {\n  _s();\n  const [inputValue, setInputValue] = useState(null);\n  const [error, setError] = useState('');\n  const onSubmit = () => {\n    // Split the input into lines\n    const lines = inputValue.split('\\n');\n    for (let i = 0; i < lines.length; i++) {\n      const line = lines[i].trim();\n      if (line === '') continue; // Skip empty lines\n\n      if (isNaN(parseFloat(amount))) {\n        setError(`Amount is not a valid number on line ${i + 1}`);\n        return;\n      }\n    }\n\n    // If no errors, clear the error message\n    setError('');\n\n    // Perform further actions here, such as processing the addresses and amounts\n    // You can access the valid addresses and amounts from the 'lines' array\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100%',\n      height: '100vh',\n      backgroundColor: 'whitesmoke',\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: '90%',\n        height: '90%',\n        backgroundColor: 'white',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '50%',\n          height: '50%',\n          padding: '3vw'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Addresses with Amounts\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          cols: 5,\n          style: {\n            width: '100%',\n            height: '80%',\n            display: 'block'\n          },\n          value: inputValue,\n          onChange: e => setInputValue(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            color: 'red'\n          },\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            width: '100%',\n            marginTop: '5vh',\n            padding: '1vw',\n            backgroundColor: 'Blue',\n            color: 'white'\n          },\n          onClick: onSubmit,\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_s(Disperse, \"RiEKDQgj9amOn9VQ+ReLaW4c5QU=\");\n_c = Disperse;\nexport default Disperse;\nvar _c;\n$RefreshReg$(_c, \"Disperse\");","map":{"version":3,"names":["React","useState","useEffe","jsxDEV","_jsxDEV","Disperse","_s","inputValue","setInputValue","error","setError","onSubmit","lines","split","i","length","line","trim","isNaN","parseFloat","amount","style","width","height","backgroundColor","display","justifyContent","alignItems","children","padding","fileName","_jsxFileName","lineNumber","columnNumber","cols","value","onChange","e","target","color","marginTop","onClick","_c","$RefreshReg$"],"sources":["/home/mrblackghost/Documents/Projects/Task/task/src/Disperse.js"],"sourcesContent":["import React, { useState, useEffe } from 'react';\n\nconst Disperse = () => {\n  const [inputValue, setInputValue] = useState(null);\n  const [error, setError] = useState('');\n\n\n\n  const onSubmit = () => {\n    // Split the input into lines\n    const lines = inputValue.split('\\n');\n\n    \n\n    for (let i = 0; i < lines.length; i++) {\n      const line = lines[i].trim();\n      if (line === '') continue; // Skip empty lines\n\n\n    \n      if (isNaN(parseFloat(amount))) {\n        setError(`Amount is not a valid number on line ${i + 1}`);\n        return;\n      }\n    }\n\n    // If no errors, clear the error message\n    setError('');\n\n    // Perform further actions here, such as processing the addresses and amounts\n    // You can access the valid addresses and amounts from the 'lines' array\n  };\n\n  return (\n    <div\n      style={{\n        width: '100%',\n        height: '100vh',\n        backgroundColor: 'whitesmoke',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n      }}\n    >\n      <div\n        style={{\n          width: '90%',\n          height: '90%',\n          backgroundColor: 'white',\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n        }}\n      >\n        <div style={{ width: '50%', height: '50%', padding: '3vw' }}>\n          <h4>Addresses with Amounts</h4>\n\n          <textarea\n            cols={5}\n            style={{ width: '100%', height: '80%', display: 'block' }}\n            value={inputValue}\n            onChange={(e) => setInputValue(e.target.value)}\n          ></textarea>\n          {error && <p style={{ color: 'red' }}>{error}</p>}\n\n          <button\n            style={{\n              width: '100%',\n              marginTop: '5vh',\n              padding: '1vw',\n              backgroundColor: 'Blue',\n              color: 'white',\n            }}\n            onClick={onSubmit}\n          >\n            Next\n          </button>\n\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Disperse;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}