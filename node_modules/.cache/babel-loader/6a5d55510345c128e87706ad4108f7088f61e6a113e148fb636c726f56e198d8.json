{"ast":null,"code":"var _jsxFileName = \"/home/mrblackghost/Documents/Projects/Task/task/src/Disperse.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Disperse = () => {\n  _s();\n  const [input, setInput] = useState('');\n  const [addresses, setAddresses] = useState([]);\n  const [amounts, setAmounts] = useState([]);\n  const [errors, setErrors] = useState([]);\n  const [validLines, setValidLines] = useState([]);\n  const [lineHistory, setLineHistory] = useState([]);\n  const onSubmit = e => {\n    e.preventDefault();\n\n    // Reset errors and valid lines\n    setErrors([]);\n    setValidLines([]);\n\n    // Split the input into address and amount pairs\n    const lines = input.split('\\n'); // Split by line breaks\n    const newAddresses = [];\n    const newAmounts = [];\n    const newErrors = [];\n    const newValidLines = [];\n    lines.forEach((line, index) => {\n      const [address, amount] = line.split('=');\n      if (address && !isNaN(amount)) {\n        newAddresses.push(address);\n        newAmounts.push(amount);\n        newValidLines.push(line);\n      } else {\n        newErrors.push(`Invalid pair on line ${index + 1}: ${line}`);\n      }\n    });\n\n    // Check if the current input is the same as any previous line\n    if (lineHistory.includes(input)) {\n      newErrors.push('Duplicate line: ' + input);\n    }\n\n    // Check if the current addresses are the same as the previous addresses\n    if (JSON.stringify(newAddresses) === JSON.stringify(addresses)) {\n      newErrors.push('Addresses are the same as the previous value.');\n    }\n    if (newErrors.length > 0) {\n      setErrors(newErrors);\n    } else {\n      setErrors([]);\n\n      // Process duplicate lines and add amounts to previous lines\n      const mergedAddresses = [];\n      const mergedAmounts = [];\n      const mergedLines = [];\n      for (let i = 0; i < newAddresses.length; i++) {\n        if (i === 0 || newAddresses[i] !== newAddresses[i - 1]) {\n          mergedAddresses.push(newAddresses[i]);\n          mergedAmounts.push(newAmounts[i]);\n          mergedLines.push(newValidLines[i]);\n        } else {\n          // Merge the amount with the previous line\n          const prevAmount = parseFloat(mergedAmounts[mergedAmounts.length - 1]);\n          const currentAmount = parseFloat(newAmounts[i]);\n          if (!isNaN(prevAmount) && !isNaN(currentAmount)) {\n            mergedAmounts[mergedAmounts.length - 1] = (prevAmount + currentAmount).toString();\n          }\n        }\n      }\n      setAddresses(mergedAddresses);\n      setAmounts(mergedAmounts);\n      setValidLines(mergedLines);\n\n      // Append each line to the line history\n      setLineHistory(prevHistory => [...prevHistory, ...lines]);\n\n      // Clear the input after submission\n      setInput('');\n    }\n  };\n  const handleAddClick = index => {\n    // Remove the selected line and add its amount to the previous line\n    const newAddresses = [...addresses];\n    const newAmounts = [...amounts];\n    const newValidLines = [...validLines];\n    if (index > 0 && index < newAddresses.length) {\n      const prevAmount = parseFloat(newAmounts[index - 1]);\n      const currentAmount = parseFloat(newAmounts[index]);\n      if (!isNaN(prevAmount) && !isNaN(currentAmount)) {\n        newAmounts[index - 1] = (prevAmount + currentAmount).toString();\n      }\n      newAddresses.splice(index, 1);\n      newAmounts.splice(index, 1);\n      newValidLines.splice(index, 1);\n      setAddresses(newAddresses);\n      setAmounts(newAmounts);\n      setValidLines(newValidLines);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: onSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"input\",\n        children: \"Enter Addresses and Amounts:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        id: \"input\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"address1=amount1, address2=amount2, ...\",\n        rows: \"4\" // You can adjust the number of visible rows as needed\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), errors.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: errors.map((error, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }, this), lineHistory.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Line History:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: lineHistory.map((line, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [`Line ${index + 1}: ${line}`, index > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleAddClick(index),\n            children: \"Add\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 19\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n};\n_s(Disperse, \"0w1Z008LDkXVy8wB9s0Q3Yj8Hvo=\");\n_c = Disperse;\nexport default Disperse;\nvar _c;\n$RefreshReg$(_c, \"Disperse\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Disperse","_s","input","setInput","addresses","setAddresses","amounts","setAmounts","errors","setErrors","validLines","setValidLines","lineHistory","setLineHistory","onSubmit","e","preventDefault","lines","split","newAddresses","newAmounts","newErrors","newValidLines","forEach","line","index","address","amount","isNaN","push","includes","JSON","stringify","length","mergedAddresses","mergedAmounts","mergedLines","i","prevAmount","parseFloat","currentAmount","toString","prevHistory","handleAddClick","splice","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","id","value","onChange","target","placeholder","rows","type","className","map","error","onClick","_c","$RefreshReg$"],"sources":["/home/mrblackghost/Documents/Projects/Task/task/src/Disperse.js"],"sourcesContent":["import React, { useState } from 'react';\n\nconst Disperse = () => {\n  const [input, setInput] = useState('');\n  const [addresses, setAddresses] = useState([]);\n  const [amounts, setAmounts] = useState([]);\n  const [errors, setErrors] = useState([]);\n  const [validLines, setValidLines] = useState([]);\n  const [lineHistory, setLineHistory] = useState([]);\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n\n    // Reset errors and valid lines\n    setErrors([]);\n    setValidLines([]);\n\n    // Split the input into address and amount pairs\n    const lines = input.split('\\n'); // Split by line breaks\n    const newAddresses = [];\n    const newAmounts = [];\n    const newErrors = [];\n    const newValidLines = [];\n\n    lines.forEach((line, index) => {\n      const [address, amount] = line.split('=');\n\n      if (address && !isNaN(amount)) {\n        newAddresses.push(address);\n        newAmounts.push(amount);\n        newValidLines.push(line);\n      } else {\n        newErrors.push(`Invalid pair on line ${index + 1}: ${line}`);\n      }\n    });\n\n    // Check if the current input is the same as any previous line\n    if (lineHistory.includes(input)) {\n      newErrors.push('Duplicate line: ' + input);\n    }\n\n    // Check if the current addresses are the same as the previous addresses\n    if (JSON.stringify(newAddresses) === JSON.stringify(addresses)) {\n      newErrors.push('Addresses are the same as the previous value.');\n    }\n\n    if (newErrors.length > 0) {\n      setErrors(newErrors);\n    } else {\n      setErrors([]);\n\n      // Process duplicate lines and add amounts to previous lines\n      const mergedAddresses = [];\n      const mergedAmounts = [];\n      const mergedLines = [];\n\n      for (let i = 0; i < newAddresses.length; i++) {\n        if (i === 0 || newAddresses[i] !== newAddresses[i - 1]) {\n          mergedAddresses.push(newAddresses[i]);\n          mergedAmounts.push(newAmounts[i]);\n          mergedLines.push(newValidLines[i]);\n        } else {\n          // Merge the amount with the previous line\n          const prevAmount = parseFloat(mergedAmounts[mergedAmounts.length - 1]);\n          const currentAmount = parseFloat(newAmounts[i]);\n          if (!isNaN(prevAmount) && !isNaN(currentAmount)) {\n            mergedAmounts[mergedAmounts.length - 1] = (prevAmount + currentAmount).toString();\n          }\n        }\n      }\n\n      setAddresses(mergedAddresses);\n      setAmounts(mergedAmounts);\n      setValidLines(mergedLines);\n\n      // Append each line to the line history\n      setLineHistory((prevHistory) => [...prevHistory, ...lines]);\n\n      // Clear the input after submission\n      setInput('');\n    }\n  };\n\n  const handleAddClick = (index) => {\n    // Remove the selected line and add its amount to the previous line\n    const newAddresses = [...addresses];\n    const newAmounts = [...amounts];\n    const newValidLines = [...validLines];\n\n    if (index > 0 && index < newAddresses.length) {\n      const prevAmount = parseFloat(newAmounts[index - 1]);\n      const currentAmount = parseFloat(newAmounts[index]);\n      if (!isNaN(prevAmount) && !isNaN(currentAmount)) {\n        newAmounts[index - 1] = (prevAmount + currentAmount).toString();\n      }\n      newAddresses.splice(index, 1);\n      newAmounts.splice(index, 1);\n      newValidLines.splice(index, 1);\n\n      setAddresses(newAddresses);\n      setAmounts(newAmounts);\n      setValidLines(newValidLines);\n    }\n  };\n\n  return (\n    <div>\n      <form onSubmit={onSubmit}>\n        <label htmlFor=\"input\">Enter Addresses and Amounts:</label>\n        <textarea\n          id=\"input\"\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n          placeholder=\"address1=amount1, address2=amount2, ...\"\n          rows=\"4\" // You can adjust the number of visible rows as needed\n        />\n        <button type=\"submit\">Submit</button>\n      </form>\n\n      {errors.length > 0 && (\n        <div className=\"error\">\n          {errors.map((error, index) => (\n            <p key={index}>{error}</p>\n          ))}\n        </div>\n      )}\n\n      {lineHistory.length > 0 && (\n        <div>\n          <h2>Line History:</h2>\n          <ul>\n            {lineHistory.map((line, index) => (\n              <li key={index}>\n                {`Line ${index + 1}: ${line}`}\n                {index > 0 && (\n                  <button onClick={() => handleAddClick(index)}>Add</button>\n                )}\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n\n      {/* Display other sections as needed */}\n    </div>\n  );\n};\n\nexport default Disperse;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACO,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACW,MAAM,EAAEC,SAAS,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACa,UAAU,EAAEC,aAAa,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACe,WAAW,EAAEC,cAAc,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAElD,MAAMiB,QAAQ,GAAIC,CAAC,IAAK;IACtBA,CAAC,CAACC,cAAc,CAAC,CAAC;;IAElB;IACAP,SAAS,CAAC,EAAE,CAAC;IACbE,aAAa,CAAC,EAAE,CAAC;;IAEjB;IACA,MAAMM,KAAK,GAAGf,KAAK,CAACgB,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;IACjC,MAAMC,YAAY,GAAG,EAAE;IACvB,MAAMC,UAAU,GAAG,EAAE;IACrB,MAAMC,SAAS,GAAG,EAAE;IACpB,MAAMC,aAAa,GAAG,EAAE;IAExBL,KAAK,CAACM,OAAO,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAK;MAC7B,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,GAAGH,IAAI,CAACN,KAAK,CAAC,GAAG,CAAC;MAEzC,IAAIQ,OAAO,IAAI,CAACE,KAAK,CAACD,MAAM,CAAC,EAAE;QAC7BR,YAAY,CAACU,IAAI,CAACH,OAAO,CAAC;QAC1BN,UAAU,CAACS,IAAI,CAACF,MAAM,CAAC;QACvBL,aAAa,CAACO,IAAI,CAACL,IAAI,CAAC;MAC1B,CAAC,MAAM;QACLH,SAAS,CAACQ,IAAI,CAAE,wBAAuBJ,KAAK,GAAG,CAAE,KAAID,IAAK,EAAC,CAAC;MAC9D;IACF,CAAC,CAAC;;IAEF;IACA,IAAIZ,WAAW,CAACkB,QAAQ,CAAC5B,KAAK,CAAC,EAAE;MAC/BmB,SAAS,CAACQ,IAAI,CAAC,kBAAkB,GAAG3B,KAAK,CAAC;IAC5C;;IAEA;IACA,IAAI6B,IAAI,CAACC,SAAS,CAACb,YAAY,CAAC,KAAKY,IAAI,CAACC,SAAS,CAAC5B,SAAS,CAAC,EAAE;MAC9DiB,SAAS,CAACQ,IAAI,CAAC,+CAA+C,CAAC;IACjE;IAEA,IAAIR,SAAS,CAACY,MAAM,GAAG,CAAC,EAAE;MACxBxB,SAAS,CAACY,SAAS,CAAC;IACtB,CAAC,MAAM;MACLZ,SAAS,CAAC,EAAE,CAAC;;MAEb;MACA,MAAMyB,eAAe,GAAG,EAAE;MAC1B,MAAMC,aAAa,GAAG,EAAE;MACxB,MAAMC,WAAW,GAAG,EAAE;MAEtB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGlB,YAAY,CAACc,MAAM,EAAEI,CAAC,EAAE,EAAE;QAC5C,IAAIA,CAAC,KAAK,CAAC,IAAIlB,YAAY,CAACkB,CAAC,CAAC,KAAKlB,YAAY,CAACkB,CAAC,GAAG,CAAC,CAAC,EAAE;UACtDH,eAAe,CAACL,IAAI,CAACV,YAAY,CAACkB,CAAC,CAAC,CAAC;UACrCF,aAAa,CAACN,IAAI,CAACT,UAAU,CAACiB,CAAC,CAAC,CAAC;UACjCD,WAAW,CAACP,IAAI,CAACP,aAAa,CAACe,CAAC,CAAC,CAAC;QACpC,CAAC,MAAM;UACL;UACA,MAAMC,UAAU,GAAGC,UAAU,CAACJ,aAAa,CAACA,aAAa,CAACF,MAAM,GAAG,CAAC,CAAC,CAAC;UACtE,MAAMO,aAAa,GAAGD,UAAU,CAACnB,UAAU,CAACiB,CAAC,CAAC,CAAC;UAC/C,IAAI,CAACT,KAAK,CAACU,UAAU,CAAC,IAAI,CAACV,KAAK,CAACY,aAAa,CAAC,EAAE;YAC/CL,aAAa,CAACA,aAAa,CAACF,MAAM,GAAG,CAAC,CAAC,GAAG,CAACK,UAAU,GAAGE,aAAa,EAAEC,QAAQ,CAAC,CAAC;UACnF;QACF;MACF;MAEApC,YAAY,CAAC6B,eAAe,CAAC;MAC7B3B,UAAU,CAAC4B,aAAa,CAAC;MACzBxB,aAAa,CAACyB,WAAW,CAAC;;MAE1B;MACAvB,cAAc,CAAE6B,WAAW,IAAK,CAAC,GAAGA,WAAW,EAAE,GAAGzB,KAAK,CAAC,CAAC;;MAE3D;MACAd,QAAQ,CAAC,EAAE,CAAC;IACd;EACF,CAAC;EAED,MAAMwC,cAAc,GAAIlB,KAAK,IAAK;IAChC;IACA,MAAMN,YAAY,GAAG,CAAC,GAAGf,SAAS,CAAC;IACnC,MAAMgB,UAAU,GAAG,CAAC,GAAGd,OAAO,CAAC;IAC/B,MAAMgB,aAAa,GAAG,CAAC,GAAGZ,UAAU,CAAC;IAErC,IAAIe,KAAK,GAAG,CAAC,IAAIA,KAAK,GAAGN,YAAY,CAACc,MAAM,EAAE;MAC5C,MAAMK,UAAU,GAAGC,UAAU,CAACnB,UAAU,CAACK,KAAK,GAAG,CAAC,CAAC,CAAC;MACpD,MAAMe,aAAa,GAAGD,UAAU,CAACnB,UAAU,CAACK,KAAK,CAAC,CAAC;MACnD,IAAI,CAACG,KAAK,CAACU,UAAU,CAAC,IAAI,CAACV,KAAK,CAACY,aAAa,CAAC,EAAE;QAC/CpB,UAAU,CAACK,KAAK,GAAG,CAAC,CAAC,GAAG,CAACa,UAAU,GAAGE,aAAa,EAAEC,QAAQ,CAAC,CAAC;MACjE;MACAtB,YAAY,CAACyB,MAAM,CAACnB,KAAK,EAAE,CAAC,CAAC;MAC7BL,UAAU,CAACwB,MAAM,CAACnB,KAAK,EAAE,CAAC,CAAC;MAC3BH,aAAa,CAACsB,MAAM,CAACnB,KAAK,EAAE,CAAC,CAAC;MAE9BpB,YAAY,CAACc,YAAY,CAAC;MAC1BZ,UAAU,CAACa,UAAU,CAAC;MACtBT,aAAa,CAACW,aAAa,CAAC;IAC9B;EACF,CAAC;EAED,oBACEvB,OAAA;IAAA8C,QAAA,gBACE9C,OAAA;MAAMe,QAAQ,EAAEA,QAAS;MAAA+B,QAAA,gBACvB9C,OAAA;QAAO+C,OAAO,EAAC,OAAO;QAAAD,QAAA,EAAC;MAA4B;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eAC3DnD,OAAA;QACEoD,EAAE,EAAC,OAAO;QACVC,KAAK,EAAElD,KAAM;QACbmD,QAAQ,EAAGtC,CAAC,IAAKZ,QAAQ,CAACY,CAAC,CAACuC,MAAM,CAACF,KAAK,CAAE;QAC1CG,WAAW,EAAC,yCAAyC;QACrDC,IAAI,EAAC,GAAG,CAAC;MAAA;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACV,CAAC,eACFnD,OAAA;QAAQ0D,IAAI,EAAC,QAAQ;QAAAZ,QAAA,EAAC;MAAM;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjC,CAAC,EAEN1C,MAAM,CAACyB,MAAM,GAAG,CAAC,iBAChBlC,OAAA;MAAK2D,SAAS,EAAC,OAAO;MAAAb,QAAA,EACnBrC,MAAM,CAACmD,GAAG,CAAC,CAACC,KAAK,EAAEnC,KAAK,kBACvB1B,OAAA;QAAA8C,QAAA,EAAgBe;MAAK,GAAbnC,KAAK;QAAAsB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY,CAC1B;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CACN,EAEAtC,WAAW,CAACqB,MAAM,GAAG,CAAC,iBACrBlC,OAAA;MAAA8C,QAAA,gBACE9C,OAAA;QAAA8C,QAAA,EAAI;MAAa;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACtBnD,OAAA;QAAA8C,QAAA,EACGjC,WAAW,CAAC+C,GAAG,CAAC,CAACnC,IAAI,EAAEC,KAAK,kBAC3B1B,OAAA;UAAA8C,QAAA,GACI,QAAOpB,KAAK,GAAG,CAAE,KAAID,IAAK,EAAC,EAC5BC,KAAK,GAAG,CAAC,iBACR1B,OAAA;YAAQ8D,OAAO,EAAEA,CAAA,KAAMlB,cAAc,CAAClB,KAAK,CAAE;YAAAoB,QAAA,EAAC;UAAG;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAC1D;QAAA,GAJMzB,KAAK;UAAAsB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAKV,CACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAGE,CAAC;AAEV,CAAC;AAACjD,EAAA,CAhJID,QAAQ;AAAA8D,EAAA,GAAR9D,QAAQ;AAkJd,eAAeA,QAAQ;AAAC,IAAA8D,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}