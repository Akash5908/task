{"ast":null,"code":"var _jsxFileName = \"/home/mrblackghost/Documents/Projects/Task/task/src/Disperse.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Disperse = () => {\n  _s();\n  const [input, setInput] = useState('');\n  const [addresses, setAddresses] = useState([]);\n  const [amounts, setAmounts] = useState([]);\n  const [errors, setErrors] = useState([]);\n  const [validLines, setValidLines] = useState([]);\n  const [lineHistory, setLineHistory] = useState([]);\n  const [showButton, setShowButton] = useState([false]);\n  const onSubmit = e => {\n    e.preventDefault();\n\n    // Reset errors and valid lines\n    setErrors([]);\n    setValidLines([]);\n\n    // Split the input into address and amount pairs\n    const lines = input.split('\\n'); // Split by line breaks\n    const newAddresses = [];\n    const newAmounts = [];\n    const newErrors = [];\n    const newValidLines = [];\n    const lineNumbers = {}; // To keep track of line numbers\n    lines.forEach((line, index) => {\n      const [address, amount] = line.split('=');\n      if (address && !isNaN(amount)) {\n        newAddresses.push(address);\n        newAmounts.push(Number(amount));\n        newValidLines.push(line);\n      } else {\n        newErrors.push(`Invalid pair on line ${index + 1}: ${line}`);\n      }\n      if (lineNumbers[line] !== undefined) {\n        // If the line has been seen before, add it to the error message\n        newErrors.push(`Duplicate line on lines ${lineNumbers[line] + 1} and ${index + 1}: ${line}`);\n        setShowButtons(true);\n      } else {\n        // Otherwise, store the line number\n        lineNumbers[line] = index;\n      }\n    });\n\n    // Check if the current addresses are the same as the previous addresses\n    if (JSON.stringify(newAddresses) === JSON.stringify(addresses)) {\n      newErrors.push('Addresses are the same as the previous value.');\n    }\n    if (newErrors.length > 0) {\n      setErrors(newErrors);\n    } else {\n      setErrors([]);\n      const mergedAddresses = [...addresses];\n      const mergedAmounts = [...amounts];\n\n      // Merge duplicate lines by adding amounts to the previous line\n      for (let i = 0; i < newAddresses.length; i++) {\n        const address = newAddresses[i];\n        const amount = newAmounts[i];\n        if (mergedAddresses.includes(address)) {\n          const index = mergedAddresses.indexOf(address);\n          mergedAmounts[index] += amount;\n        } else {\n          mergedAddresses.push(address);\n          mergedAmounts.push(amount);\n        }\n      }\n      setAddresses(mergedAddresses);\n      setAmounts(mergedAmounts);\n      setValidLines(newValidLines);\n\n      // Append each line to the line history\n      setLineHistory(prevHistory => [...prevHistory, ...lines]);\n\n      // Clear the input after submission\n      setInput('');\n    }\n  };\n  const [showButtons, setShowButtons] = useState(Array(validLines.length).fill(false));\n  const Keepfirstone = line => {\n    // Split the current input into lines\n    const inputLines = input.split('\\n');\n\n    // Filter out the duplicate line from inputLines\n    const updatedInputLines = inputLines.filter(inputLine => inputLine !== line);\n\n    // Join the updated lines back together and set it as the new input\n    setInput(updatedInputLines.join('\\n'));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: onSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"input\",\n        children: \"Enter Addresses and Amounts:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        id: \"input\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"address1=amount1, address2=amount2, ...\",\n        rows: \"4\" // You can adjust the number of visible rows as needed\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), errors.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: errors.map((error, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }, this), lineHistory.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Line History:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: lineHistory.map((line, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: showButtons && /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => setShowButton(prev => [...prev.slice(0, index), true, ...prev.slice(index + 1)]),\n                children: \"Add\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 132,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => Keepfirstone(line),\n                children: \"Remove\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 133,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: line\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 11\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 9\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n_s(Disperse, \"Fp2nxEd2WfRcIVtX4R3pNZIaqwo=\");\n_c = Disperse;\nexport default Disperse;\nvar _c;\n$RefreshReg$(_c, \"Disperse\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Disperse","_s","input","setInput","addresses","setAddresses","amounts","setAmounts","errors","setErrors","validLines","setValidLines","lineHistory","setLineHistory","showButton","setShowButton","onSubmit","e","preventDefault","lines","split","newAddresses","newAmounts","newErrors","newValidLines","lineNumbers","forEach","line","index","address","amount","isNaN","push","Number","undefined","setShowButtons","JSON","stringify","length","mergedAddresses","mergedAmounts","i","includes","indexOf","prevHistory","showButtons","Array","fill","Keepfirstone","inputLines","updatedInputLines","filter","inputLine","join","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","id","value","onChange","target","placeholder","rows","type","className","map","error","onClick","prev","slice","_c","$RefreshReg$"],"sources":["/home/mrblackghost/Documents/Projects/Task/task/src/Disperse.js"],"sourcesContent":["import React, { useState } from 'react';\n\nconst Disperse = () => {\n  const [input, setInput] = useState('');\n  const [addresses, setAddresses] = useState([]);\n  const [amounts, setAmounts] = useState([]);\n  const [errors, setErrors] = useState([]);\n  const [validLines, setValidLines] = useState([]);\n  const [lineHistory, setLineHistory] = useState([]);\n  const [showButton, setShowButton] = useState([false]);\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n\n    // Reset errors and valid lines\n    setErrors([]);\n    setValidLines([]);\n\n    // Split the input into address and amount pairs\n    const lines = input.split('\\n'); // Split by line breaks\n    const newAddresses = [];\n    const newAmounts = [];\n    const newErrors = [];\n    const newValidLines = [];\n    const lineNumbers = {}; // To keep track of line numbers\n    lines.forEach((line, index) => {\n      const [address, amount] = line.split('=');\n\n      if (address && !isNaN(amount)) {\n        newAddresses.push(address);\n        newAmounts.push(Number(amount));\n        newValidLines.push(line);\n      } else {\n        newErrors.push(`Invalid pair on line ${index + 1}: ${line}`);\n      }\n   \n\n    if (lineNumbers[line] !== undefined) {\n      // If the line has been seen before, add it to the error message\n      newErrors.push(`Duplicate line on lines ${lineNumbers[line] + 1} and ${index + 1}: ${line}`);\n      setShowButtons(true)\n    } else {\n      // Otherwise, store the line number\n      lineNumbers[line] = index;\n    }\n  });\n     \n\n    // Check if the current addresses are the same as the previous addresses\n    if (JSON.stringify(newAddresses) === JSON.stringify(addresses)) {\n      newErrors.push('Addresses are the same as the previous value.');\n    }\n\n    if (newErrors.length > 0) {\n      setErrors(newErrors);\n    } else {\n      setErrors([]);\n\n      const mergedAddresses = [...addresses];\n      const mergedAmounts = [...amounts];\n\n      // Merge duplicate lines by adding amounts to the previous line\n      for (let i = 0; i < newAddresses.length; i++) {\n        const address = newAddresses[i];\n        const amount = newAmounts[i];\n\n        if (mergedAddresses.includes(address)) {\n          const index = mergedAddresses.indexOf(address);\n          mergedAmounts[index] += amount;\n        } else {\n          mergedAddresses.push(address);\n          mergedAmounts.push(amount);\n        }\n      }\n\n      setAddresses(mergedAddresses);\n      setAmounts(mergedAmounts);\n      setValidLines(newValidLines);\n\n      // Append each line to the line history\n      setLineHistory((prevHistory) => [...prevHistory, ...lines]);\n\n      // Clear the input after submission\n      setInput('');\n    }\n  };\n  const [showButtons, setShowButtons] = useState(Array(validLines.length).fill(false));\n  const Keepfirstone = (line) => {\n    // Split the current input into lines\n    const inputLines = input.split('\\n');\n    \n    // Filter out the duplicate line from inputLines\n    const updatedInputLines = inputLines.filter((inputLine) => inputLine !== line);\n  \n    // Join the updated lines back together and set it as the new input\n    setInput(updatedInputLines.join('\\n'));\n  };\n  \n\n  return (\n    <div>\n      <form onSubmit={onSubmit}>\n        <label htmlFor=\"input\">Enter Addresses and Amounts:</label>\n        <textarea\n          id=\"input\"\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n          placeholder=\"address1=amount1, address2=amount2, ...\"\n          rows=\"4\" // You can adjust the number of visible rows as needed\n        />\n        <button type=\"submit\">Submit</button>\n      </form>\n\n      {errors.length > 0 && (\n        <div className=\"error\">\n          {errors.map((error, index) => (\n            <p key={index}>{error}</p>\n          ))}\n        </div>\n      )}\n\n{lineHistory.length > 0 && (\n  <div>\n    <h2>Line History:</h2>\n    <div>\n      {lineHistory.map((line, index) => (\n        <div key={index}>\n\n            <div>\n              {showButtons && (\n                <div>\n                  <button onClick={() => setShowButton((prev) => [...prev.slice(0, index), true, ...prev.slice(index + 1)])}>Add</button>\n                  <button onClick={() => Keepfirstone(line)}>Remove</button>\n                </div>\n              )}\n            </div>\n          \n          <p>{line}</p>\n        </div>\n      ))}\n    </div>\n  </div>\n)}\n\n\n      {/* Display other sections as needed */}\n    </div>\n  );\n};\n\nexport default Disperse;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}