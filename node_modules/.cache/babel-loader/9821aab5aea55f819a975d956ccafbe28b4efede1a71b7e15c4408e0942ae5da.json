{"ast":null,"code":"var _jsxFileName = \"/home/mrblackghost/Documents/Projects/Task/task/src/Disperse.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Disperse = () => {\n  _s();\n  const [input, setInput] = useState('');\n  const [addresses, setAddresses] = useState([]);\n  const [amounts, setAmounts] = useState([]);\n  const [errors, setErrors] = useState([]);\n  const [validLines, setValidLines] = useState([]);\n  const [lineHistory, setLineHistory] = useState([]);\n  const [showAddButton, setShowAddButton] = useState([]);\n  const onSubmit = e => {\n    e.preventDefault();\n\n    // Reset errors and valid lines\n    setErrors([]);\n    setValidLines([]);\n    setShowAddButton([]);\n\n    // Split the input into address and amount pairs\n    const lines = input.split('\\n'); // Split by line breaks\n    const newAddresses = [];\n    const newAmounts = [];\n    const newErrors = [];\n    const newValidLines = [];\n    lines.forEach((line, index) => {\n      const [address, amount] = line.split('=');\n      if (address && !isNaN(amount)) {\n        newAddresses.push(address);\n        newAmounts.push(Number(amount));\n        newValidLines.push(line);\n        setShowAddButton(prev => [...prev, false]); // Initialize showAddButton state\n      } else {\n        newErrors.push(`Invalid pair on line ${index + 1}: ${line}`);\n      }\n    });\n\n    // Check if the current input is the same as any previous line\n    if (lineHistory.includes(input)) {\n      newErrors.push('Duplicate line: ' + input);\n    }\n\n    // Check if the current addresses are the same as the previous addresses\n    if (JSON.stringify(newAddresses) === JSON.stringify(addresses)) {\n      newErrors.push('Addresses are the same as the previous value.');\n    }\n    if (newErrors.length > 0) {\n      setErrors(newErrors);\n    } else {\n      setErrors([]);\n      const mergedAddresses = [...addresses];\n      const mergedAmounts = [...amounts];\n\n      // Merge duplicate lines by adding amounts to the previous line\n      for (let i = 0; i < newAddresses.length; i++) {\n        const address = newAddresses[i];\n        const amount = newAmounts[i];\n        if (mergedAddresses.includes(address)) {\n          const index = mergedAddresses.indexOf(address);\n          mergedAmounts[index] += amount;\n        } else {\n          mergedAddresses.push(address);\n          mergedAmounts.push(amount);\n        }\n      }\n      setAddresses(mergedAddresses);\n      setAmounts(mergedAmounts);\n      setValidLines(newValidLines);\n\n      // Append each line to the line history\n      setLineHistory(prevHistory => [...prevHistory, ...lines]);\n\n      // Clear the input after submission\n      setInput('');\n    }\n  };\n  const Keepfirstone = line => {\n    // Find the index of the current line\n    const lineIndex = validLines.indexOf(line);\n    if (lineIndex !== -1) {\n      // Remove the current line\n      setValidLines(prevValidLines => prevValidLines.filter((validLine, index) => index !== lineIndex));\n      setAddresses(prevAddresses => prevAddresses.filter((_, index) => index !== lineIndex));\n      setAmounts(prevAmounts => prevAmounts.filter((_, index) => index !== lineIndex));\n      // Remove the corresponding showDeleteButton state\n      setShowDeleteButton(prevShowDeleteButton => prevShowDeleteButton.filter((_, index) => index !== lineIndex));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: onSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"input\",\n        children: \"Enter Addresses and Amounts:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        id: \"input\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"address1=amount1, address2=amount2, ...\",\n        rows: \"4\" // You can adjust the number of visible rows as needed\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), errors.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: errors.map((error, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }, this), lineHistory.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Line History:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: lineHistory.map((line, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [line, ' ', (errors.includes('Duplicate line: ' + line) || errors.includes('Addresses are the same as the previous value.')) && /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setShowAddButton(prev => [...prev.slice(0, index), true, ...prev.slice(index + 1)]),\n            children: \"Add\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 19\n          }, this), showAddButton[index] && /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => Keepfirstone(line),\n            children: \"Remove\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 19\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n};\n_s(Disperse, \"2s07CyCMag200APA1ZJKHCbO1LE=\");\n_c = Disperse;\nexport default Disperse;\nvar _c;\n$RefreshReg$(_c, \"Disperse\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Disperse","_s","input","setInput","addresses","setAddresses","amounts","setAmounts","errors","setErrors","validLines","setValidLines","lineHistory","setLineHistory","showAddButton","setShowAddButton","onSubmit","e","preventDefault","lines","split","newAddresses","newAmounts","newErrors","newValidLines","forEach","line","index","address","amount","isNaN","push","Number","prev","includes","JSON","stringify","length","mergedAddresses","mergedAmounts","i","indexOf","prevHistory","Keepfirstone","lineIndex","prevValidLines","filter","validLine","prevAddresses","_","prevAmounts","setShowDeleteButton","prevShowDeleteButton","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","id","value","onChange","target","placeholder","rows","type","className","map","error","onClick","slice","_c","$RefreshReg$"],"sources":["/home/mrblackghost/Documents/Projects/Task/task/src/Disperse.js"],"sourcesContent":["import React, { useState } from 'react';\n\nconst Disperse = () => {\n  const [input, setInput] = useState('');\n  const [addresses, setAddresses] = useState([]);\n  const [amounts, setAmounts] = useState([]);\n  const [errors, setErrors] = useState([]);\n  const [validLines, setValidLines] = useState([]);\n  const [lineHistory, setLineHistory] = useState([]);\n  const [showAddButton, setShowAddButton] = useState([]);\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n\n    // Reset errors and valid lines\n    setErrors([]);\n    setValidLines([]);\n    setShowAddButton([]);\n\n    // Split the input into address and amount pairs\n    const lines = input.split('\\n'); // Split by line breaks\n    const newAddresses = [];\n    const newAmounts = [];\n    const newErrors = [];\n    const newValidLines = [];\n\n    lines.forEach((line, index) => {\n      const [address, amount] = line.split('=');\n\n      if (address && !isNaN(amount)) {\n        newAddresses.push(address);\n        newAmounts.push(Number(amount));\n        newValidLines.push(line);\n        setShowAddButton((prev) => [...prev, false]); // Initialize showAddButton state\n      } else {\n        newErrors.push(`Invalid pair on line ${index + 1}: ${line}`);\n      }\n    });\n\n    // Check if the current input is the same as any previous line\n    if (lineHistory.includes(input)) {\n      newErrors.push('Duplicate line: ' + input);\n    }\n\n    // Check if the current addresses are the same as the previous addresses\n    if (JSON.stringify(newAddresses) === JSON.stringify(addresses)) {\n      newErrors.push('Addresses are the same as the previous value.');\n    }\n\n    if (newErrors.length > 0) {\n      setErrors(newErrors);\n    } else {\n      setErrors([]);\n\n      const mergedAddresses = [...addresses];\n      const mergedAmounts = [...amounts];\n\n      // Merge duplicate lines by adding amounts to the previous line\n      for (let i = 0; i < newAddresses.length; i++) {\n        const address = newAddresses[i];\n        const amount = newAmounts[i];\n\n        if (mergedAddresses.includes(address)) {\n          const index = mergedAddresses.indexOf(address);\n          mergedAmounts[index] += amount;\n        } else {\n          mergedAddresses.push(address);\n          mergedAmounts.push(amount);\n        }\n      }\n\n      setAddresses(mergedAddresses);\n      setAmounts(mergedAmounts);\n      setValidLines(newValidLines);\n\n      // Append each line to the line history\n      setLineHistory((prevHistory) => [...prevHistory, ...lines]);\n\n      // Clear the input after submission\n      setInput('');\n    }\n  };\n  const Keepfirstone = (line) => {\n    // Find the index of the current line\n    const lineIndex = validLines.indexOf(line);\n    if (lineIndex !== -1) {\n      // Remove the current line\n      setValidLines((prevValidLines) =>\n        prevValidLines.filter((validLine, index) => index !== lineIndex)\n      );\n      setAddresses((prevAddresses) =>\n        prevAddresses.filter((_, index) => index !== lineIndex)\n      );\n      setAmounts((prevAmounts) =>\n        prevAmounts.filter((_, index) => index !== lineIndex)\n      );\n      // Remove the corresponding showDeleteButton state\n      setShowDeleteButton((prevShowDeleteButton) =>\n        prevShowDeleteButton.filter((_, index) => index !== lineIndex)\n      );\n    }\n  };\n\n  return (\n    <div>\n      <form onSubmit={onSubmit}>\n        <label htmlFor=\"input\">Enter Addresses and Amounts:</label>\n        <textarea\n          id=\"input\"\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n          placeholder=\"address1=amount1, address2=amount2, ...\"\n          rows=\"4\" // You can adjust the number of visible rows as needed\n        />\n        <button type=\"submit\">Submit</button>\n      </form>\n\n      {errors.length > 0 && (\n        <div className=\"error\">\n          {errors.map((error, index) => (\n            <p key={index}>{error}</p>\n          ))}\n        </div>\n      )}\n\n      {lineHistory.length > 0 && (\n        <div>\n          <h2>Line History:</h2>\n          <ul>\n            {lineHistory.map((line, index) => (\n              <li key={index}>\n                {line}{' '}\n                {(errors.includes('Duplicate line: ' + line) ||\n                  errors.includes('Addresses are the same as the previous value.')) && (\n                  <button onClick={() => setShowAddButton((prev) => [...prev.slice(0, index), true, ...prev.slice(index + 1)])}>Add</button>\n                )}\n                {showAddButton[index] && (\n                  <button onClick={() => Keepfirstone(line)}>Remove</button>\n                )}\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n\n      {/* Display other sections as needed */}\n    </div>\n  );\n};\n\nexport default Disperse;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}